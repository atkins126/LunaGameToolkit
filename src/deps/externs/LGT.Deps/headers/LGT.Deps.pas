(* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        .
     .--:         :
    ----        :---:
  .-----         .-.
 .------          .
 -------.
.--------               :
.---------             .:.
 ----------:            .
 :-----------:
  --------------:.         .:.
   :------------------------
    .---------------------.
       :---------------:.
          ..:::::::..
              ...
     _
    | |    _  _  _ _   __ _
    | |__ | || || ' \ / _` |
    |____| \_,_||_||_|\__,_|
         Game Toolkit™

Copyright © 2022-present tinyBigGAMES™ LLC
         All Rights Reserved.

Website: https://tinybiggames.com
Email  : support@tinybiggames.com

See LICENSE for license information
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *)

unit LGT.Deps;

{$I LGT.Defines.inc}

interface

uses
  WinApi.Windows;

const
  GLFW_VERSION_MAJOR = 3;
  GLFW_VERSION_MINOR = 4;
  GLFW_VERSION_REVISION = 0;
  GLFW_TRUE = 1;
  GLFW_FALSE = 0;
  GLFW_RELEASE = 0;
  GLFW_PRESS = 1;
  GLFW_REPEAT = 2;
  GLFW_HAT_CENTERED = 0;
  GLFW_HAT_UP = 1;
  GLFW_HAT_RIGHT = 2;
  GLFW_HAT_DOWN = 4;
  GLFW_HAT_LEFT = 8;
  GLFW_HAT_RIGHT_UP = (GLFW_HAT_RIGHT or GLFW_HAT_UP);
  GLFW_HAT_RIGHT_DOWN = (GLFW_HAT_RIGHT or GLFW_HAT_DOWN);
  GLFW_HAT_LEFT_UP = (GLFW_HAT_LEFT or GLFW_HAT_UP);
  GLFW_HAT_LEFT_DOWN = (GLFW_HAT_LEFT or GLFW_HAT_DOWN);
  GLFW_KEY_UNKNOWN = -1;
  GLFW_KEY_SPACE = 32;
  GLFW_KEY_APOSTROPHE = 39;
  GLFW_KEY_COMMA = 44;
  GLFW_KEY_MINUS = 45;
  GLFW_KEY_PERIOD = 46;
  GLFW_KEY_SLASH = 47;
  GLFW_KEY_0 = 48;
  GLFW_KEY_1 = 49;
  GLFW_KEY_2 = 50;
  GLFW_KEY_3 = 51;
  GLFW_KEY_4 = 52;
  GLFW_KEY_5 = 53;
  GLFW_KEY_6 = 54;
  GLFW_KEY_7 = 55;
  GLFW_KEY_8 = 56;
  GLFW_KEY_9 = 57;
  GLFW_KEY_SEMICOLON = 59;
  GLFW_KEY_EQUAL = 61;
  GLFW_KEY_A = 65;
  GLFW_KEY_B = 66;
  GLFW_KEY_C = 67;
  GLFW_KEY_D = 68;
  GLFW_KEY_E = 69;
  GLFW_KEY_F = 70;
  GLFW_KEY_G = 71;
  GLFW_KEY_H = 72;
  GLFW_KEY_I = 73;
  GLFW_KEY_J = 74;
  GLFW_KEY_K = 75;
  GLFW_KEY_L = 76;
  GLFW_KEY_M = 77;
  GLFW_KEY_N = 78;
  GLFW_KEY_O = 79;
  GLFW_KEY_P = 80;
  GLFW_KEY_Q = 81;
  GLFW_KEY_R = 82;
  GLFW_KEY_S = 83;
  GLFW_KEY_T = 84;
  GLFW_KEY_U = 85;
  GLFW_KEY_V = 86;
  GLFW_KEY_W = 87;
  GLFW_KEY_X = 88;
  GLFW_KEY_Y = 89;
  GLFW_KEY_Z = 90;
  GLFW_KEY_LEFT_BRACKET = 91;
  GLFW_KEY_BACKSLASH = 92;
  GLFW_KEY_RIGHT_BRACKET = 93;
  GLFW_KEY_GRAVE_ACCENT = 96;
  GLFW_KEY_WORLD_1 = 161;
  GLFW_KEY_WORLD_2 = 162;
  GLFW_KEY_ESCAPE = 256;
  GLFW_KEY_ENTER = 257;
  GLFW_KEY_TAB = 258;
  GLFW_KEY_BACKSPACE = 259;
  GLFW_KEY_INSERT = 260;
  GLFW_KEY_DELETE = 261;
  GLFW_KEY_RIGHT = 262;
  GLFW_KEY_LEFT = 263;
  GLFW_KEY_DOWN = 264;
  GLFW_KEY_UP = 265;
  GLFW_KEY_PAGE_UP = 266;
  GLFW_KEY_PAGE_DOWN = 267;
  GLFW_KEY_HOME = 268;
  GLFW_KEY_END = 269;
  GLFW_KEY_CAPS_LOCK = 280;
  GLFW_KEY_SCROLL_LOCK = 281;
  GLFW_KEY_NUM_LOCK = 282;
  GLFW_KEY_PRINT_SCREEN = 283;
  GLFW_KEY_PAUSE = 284;
  GLFW_KEY_F1 = 290;
  GLFW_KEY_F2 = 291;
  GLFW_KEY_F3 = 292;
  GLFW_KEY_F4 = 293;
  GLFW_KEY_F5 = 294;
  GLFW_KEY_F6 = 295;
  GLFW_KEY_F7 = 296;
  GLFW_KEY_F8 = 297;
  GLFW_KEY_F9 = 298;
  GLFW_KEY_F10 = 299;
  GLFW_KEY_F11 = 300;
  GLFW_KEY_F12 = 301;
  GLFW_KEY_F13 = 302;
  GLFW_KEY_F14 = 303;
  GLFW_KEY_F15 = 304;
  GLFW_KEY_F16 = 305;
  GLFW_KEY_F17 = 306;
  GLFW_KEY_F18 = 307;
  GLFW_KEY_F19 = 308;
  GLFW_KEY_F20 = 309;
  GLFW_KEY_F21 = 310;
  GLFW_KEY_F22 = 311;
  GLFW_KEY_F23 = 312;
  GLFW_KEY_F24 = 313;
  GLFW_KEY_F25 = 314;
  GLFW_KEY_KP_0 = 320;
  GLFW_KEY_KP_1 = 321;
  GLFW_KEY_KP_2 = 322;
  GLFW_KEY_KP_3 = 323;
  GLFW_KEY_KP_4 = 324;
  GLFW_KEY_KP_5 = 325;
  GLFW_KEY_KP_6 = 326;
  GLFW_KEY_KP_7 = 327;
  GLFW_KEY_KP_8 = 328;
  GLFW_KEY_KP_9 = 329;
  GLFW_KEY_KP_DECIMAL = 330;
  GLFW_KEY_KP_DIVIDE = 331;
  GLFW_KEY_KP_MULTIPLY = 332;
  GLFW_KEY_KP_SUBTRACT = 333;
  GLFW_KEY_KP_ADD = 334;
  GLFW_KEY_KP_ENTER = 335;
  GLFW_KEY_KP_EQUAL = 336;
  GLFW_KEY_LEFT_SHIFT = 340;
  GLFW_KEY_LEFT_CONTROL = 341;
  GLFW_KEY_LEFT_ALT = 342;
  GLFW_KEY_LEFT_SUPER = 343;
  GLFW_KEY_RIGHT_SHIFT = 344;
  GLFW_KEY_RIGHT_CONTROL = 345;
  GLFW_KEY_RIGHT_ALT = 346;
  GLFW_KEY_RIGHT_SUPER = 347;
  GLFW_KEY_MENU = 348;
  GLFW_KEY_LAST = GLFW_KEY_MENU;
  GLFW_MOD_SHIFT = $0001;
  GLFW_MOD_CONTROL = $0002;
  GLFW_MOD_ALT = $0004;
  GLFW_MOD_SUPER = $0008;
  GLFW_MOD_CAPS_LOCK = $0010;
  GLFW_MOD_NUM_LOCK = $0020;
  GLFW_MOUSE_BUTTON_1 = 0;
  GLFW_MOUSE_BUTTON_2 = 1;
  GLFW_MOUSE_BUTTON_3 = 2;
  GLFW_MOUSE_BUTTON_4 = 3;
  GLFW_MOUSE_BUTTON_5 = 4;
  GLFW_MOUSE_BUTTON_6 = 5;
  GLFW_MOUSE_BUTTON_7 = 6;
  GLFW_MOUSE_BUTTON_8 = 7;
  GLFW_MOUSE_BUTTON_LAST = GLFW_MOUSE_BUTTON_8;
  GLFW_MOUSE_BUTTON_LEFT = GLFW_MOUSE_BUTTON_1;
  GLFW_MOUSE_BUTTON_RIGHT = GLFW_MOUSE_BUTTON_2;
  GLFW_MOUSE_BUTTON_MIDDLE = GLFW_MOUSE_BUTTON_3;
  GLFW_JOYSTICK_1 = 0;
  GLFW_JOYSTICK_2 = 1;
  GLFW_JOYSTICK_3 = 2;
  GLFW_JOYSTICK_4 = 3;
  GLFW_JOYSTICK_5 = 4;
  GLFW_JOYSTICK_6 = 5;
  GLFW_JOYSTICK_7 = 6;
  GLFW_JOYSTICK_8 = 7;
  GLFW_JOYSTICK_9 = 8;
  GLFW_JOYSTICK_10 = 9;
  GLFW_JOYSTICK_11 = 10;
  GLFW_JOYSTICK_12 = 11;
  GLFW_JOYSTICK_13 = 12;
  GLFW_JOYSTICK_14 = 13;
  GLFW_JOYSTICK_15 = 14;
  GLFW_JOYSTICK_16 = 15;
  GLFW_JOYSTICK_LAST = GLFW_JOYSTICK_16;
  GLFW_GAMEPAD_BUTTON_A = 0;
  GLFW_GAMEPAD_BUTTON_B = 1;
  GLFW_GAMEPAD_BUTTON_X = 2;
  GLFW_GAMEPAD_BUTTON_Y = 3;
  GLFW_GAMEPAD_BUTTON_LEFT_BUMPER = 4;
  GLFW_GAMEPAD_BUTTON_RIGHT_BUMPER = 5;
  GLFW_GAMEPAD_BUTTON_BACK = 6;
  GLFW_GAMEPAD_BUTTON_START = 7;
  GLFW_GAMEPAD_BUTTON_GUIDE = 8;
  GLFW_GAMEPAD_BUTTON_LEFT_THUMB = 9;
  GLFW_GAMEPAD_BUTTON_RIGHT_THUMB = 10;
  GLFW_GAMEPAD_BUTTON_DPAD_UP = 11;
  GLFW_GAMEPAD_BUTTON_DPAD_RIGHT = 12;
  GLFW_GAMEPAD_BUTTON_DPAD_DOWN = 13;
  GLFW_GAMEPAD_BUTTON_DPAD_LEFT = 14;
  GLFW_GAMEPAD_BUTTON_LAST = GLFW_GAMEPAD_BUTTON_DPAD_LEFT;
  GLFW_GAMEPAD_BUTTON_CROSS = GLFW_GAMEPAD_BUTTON_A;
  GLFW_GAMEPAD_BUTTON_CIRCLE = GLFW_GAMEPAD_BUTTON_B;
  GLFW_GAMEPAD_BUTTON_SQUARE = GLFW_GAMEPAD_BUTTON_X;
  GLFW_GAMEPAD_BUTTON_TRIANGLE = GLFW_GAMEPAD_BUTTON_Y;
  GLFW_GAMEPAD_AXIS_LEFT_X = 0;
  GLFW_GAMEPAD_AXIS_LEFT_Y = 1;
  GLFW_GAMEPAD_AXIS_RIGHT_X = 2;
  GLFW_GAMEPAD_AXIS_RIGHT_Y = 3;
  GLFW_GAMEPAD_AXIS_LEFT_TRIGGER = 4;
  GLFW_GAMEPAD_AXIS_RIGHT_TRIGGER = 5;
  GLFW_GAMEPAD_AXIS_LAST = GLFW_GAMEPAD_AXIS_RIGHT_TRIGGER;
  GLFW_NO_ERROR = 0;
  GLFW_NOT_INITIALIZED = $00010001;
  GLFW_NO_CURRENT_CONTEXT = $00010002;
  GLFW_INVALID_ENUM = $00010003;
  GLFW_INVALID_VALUE = $00010004;
  GLFW_OUT_OF_MEMORY = $00010005;
  GLFW_API_UNAVAILABLE = $00010006;
  GLFW_VERSION_UNAVAILABLE = $00010007;
  GLFW_PLATFORM_ERROR = $00010008;
  GLFW_FORMAT_UNAVAILABLE = $00010009;
  GLFW_NO_WINDOW_CONTEXT = $0001000A;
  GLFW_CURSOR_UNAVAILABLE = $0001000B;
  GLFW_FEATURE_UNAVAILABLE = $0001000C;
  GLFW_FEATURE_UNIMPLEMENTED = $0001000D;
  GLFW_PLATFORM_UNAVAILABLE = $0001000E;
  GLFW_FOCUSED = $00020001;
  GLFW_ICONIFIED = $00020002;
  GLFW_RESIZABLE = $00020003;
  GLFW_VISIBLE = $00020004;
  GLFW_DECORATED = $00020005;
  GLFW_AUTO_ICONIFY = $00020006;
  GLFW_FLOATING = $00020007;
  GLFW_MAXIMIZED = $00020008;
  GLFW_CENTER_CURSOR = $00020009;
  GLFW_TRANSPARENT_FRAMEBUFFER = $0002000A;
  GLFW_HOVERED = $0002000B;
  GLFW_FOCUS_ON_SHOW = $0002000C;
  GLFW_MOUSE_PASSTHROUGH = $0002000D;
  GLFW_POSITION_X = $0002000E;
  GLFW_POSITION_Y = $0002000F;
  GLFW_RED_BITS = $00021001;
  GLFW_GREEN_BITS = $00021002;
  GLFW_BLUE_BITS = $00021003;
  GLFW_ALPHA_BITS = $00021004;
  GLFW_DEPTH_BITS = $00021005;
  GLFW_STENCIL_BITS = $00021006;
  GLFW_ACCUM_RED_BITS = $00021007;
  GLFW_ACCUM_GREEN_BITS = $00021008;
  GLFW_ACCUM_BLUE_BITS = $00021009;
  GLFW_ACCUM_ALPHA_BITS = $0002100A;
  GLFW_AUX_BUFFERS = $0002100B;
  GLFW_STEREO = $0002100C;
  GLFW_SAMPLES = $0002100D;
  GLFW_SRGB_CAPABLE = $0002100E;
  GLFW_REFRESH_RATE = $0002100F;
  GLFW_DOUBLEBUFFER = $00021010;
  GLFW_CLIENT_API = $00022001;
  GLFW_CONTEXT_VERSION_MAJOR = $00022002;
  GLFW_CONTEXT_VERSION_MINOR = $00022003;
  GLFW_CONTEXT_REVISION = $00022004;
  GLFW_CONTEXT_ROBUSTNESS = $00022005;
  GLFW_OPENGL_FORWARD_COMPAT = $00022006;
  GLFW_CONTEXT_DEBUG = $00022007;
  GLFW_OPENGL_DEBUG_CONTEXT = GLFW_CONTEXT_DEBUG;
  GLFW_OPENGL_PROFILE = $00022008;
  GLFW_CONTEXT_RELEASE_BEHAVIOR = $00022009;
  GLFW_CONTEXT_NO_ERROR = $0002200A;
  GLFW_CONTEXT_CREATION_API = $0002200B;
  GLFW_SCALE_TO_MONITOR = $0002200C;
  GLFW_COCOA_RETINA_FRAMEBUFFER = $00023001;
  GLFW_COCOA_FRAME_NAME = $00023002;
  GLFW_COCOA_GRAPHICS_SWITCHING = $00023003;
  GLFW_X11_CLASS_NAME = $00024001;
  GLFW_X11_INSTANCE_NAME = $00024002;
  GLFW_WIN32_KEYBOARD_MENU = $00025001;
  GLFW_WAYLAND_APP_ID = $00026001;
  GLFW_NO_API = 0;
  GLFW_OPENGL_API = $00030001;
  GLFW_OPENGL_ES_API = $00030002;
  GLFW_NO_ROBUSTNESS = 0;
  GLFW_NO_RESET_NOTIFICATION = $00031001;
  GLFW_LOSE_CONTEXT_ON_RESET = $00031002;
  GLFW_OPENGL_ANY_PROFILE = 0;
  GLFW_OPENGL_CORE_PROFILE = $00032001;
  GLFW_OPENGL_COMPAT_PROFILE = $00032002;
  GLFW_CURSOR = $00033001;
  GLFW_STICKY_KEYS = $00033002;
  GLFW_STICKY_MOUSE_BUTTONS = $00033003;
  GLFW_LOCK_KEY_MODS = $00033004;
  GLFW_RAW_MOUSE_MOTION = $00033005;
  GLFW_CURSOR_NORMAL = $00034001;
  GLFW_CURSOR_HIDDEN = $00034002;
  GLFW_CURSOR_DISABLED = $00034003;
  GLFW_CURSOR_CAPTURED = $00034004;
  GLFW_ANY_RELEASE_BEHAVIOR = 0;
  GLFW_RELEASE_BEHAVIOR_FLUSH = $00035001;
  GLFW_RELEASE_BEHAVIOR_NONE = $00035002;
  GLFW_NATIVE_CONTEXT_API = $00036001;
  GLFW_EGL_CONTEXT_API = $00036002;
  GLFW_OSMESA_CONTEXT_API = $00036003;
  GLFW_ANGLE_PLATFORM_TYPE_NONE = $00037001;
  GLFW_ANGLE_PLATFORM_TYPE_OPENGL = $00037002;
  GLFW_ANGLE_PLATFORM_TYPE_OPENGLES = $00037003;
  GLFW_ANGLE_PLATFORM_TYPE_D3D9 = $00037004;
  GLFW_ANGLE_PLATFORM_TYPE_D3D11 = $00037005;
  GLFW_ANGLE_PLATFORM_TYPE_VULKAN = $00037007;
  GLFW_ANGLE_PLATFORM_TYPE_METAL = $00037008;
  GLFW_WAYLAND_PREFER_LIBDECOR = $00038001;
  GLFW_WAYLAND_DISABLE_LIBDECOR = $00038002;
  GLFW_ANY_POSITION = $80000000;
  GLFW_ARROW_CURSOR = $00036001;
  GLFW_IBEAM_CURSOR = $00036002;
  GLFW_CROSSHAIR_CURSOR = $00036003;
  GLFW_POINTING_HAND_CURSOR = $00036004;
  GLFW_RESIZE_EW_CURSOR = $00036005;
  GLFW_RESIZE_NS_CURSOR = $00036006;
  GLFW_RESIZE_NWSE_CURSOR = $00036007;
  GLFW_RESIZE_NESW_CURSOR = $00036008;
  GLFW_RESIZE_ALL_CURSOR = $00036009;
  GLFW_NOT_ALLOWED_CURSOR = $0003600A;
  GLFW_HRESIZE_CURSOR = GLFW_RESIZE_EW_CURSOR;
  GLFW_VRESIZE_CURSOR = GLFW_RESIZE_NS_CURSOR;
  GLFW_HAND_CURSOR = GLFW_POINTING_HAND_CURSOR;
  GLFW_CONNECTED = $00040001;
  GLFW_DISCONNECTED = $00040002;
  GLFW_JOYSTICK_HAT_BUTTONS = $00050001;
  GLFW_ANGLE_PLATFORM_TYPE = $00050002;
  GLFW_PLATFORM = $00050003;
  GLFW_COCOA_CHDIR_RESOURCES = $00051001;
  GLFW_COCOA_MENUBAR = $00051002;
  GLFW_X11_XCB_VULKAN_SURFACE = $00052001;
  GLFW_WAYLAND_LIBDECOR = $00053001;
  GLFW_ANY_PLATFORM = $00060000;
  GLFW_PLATFORM_WIN32 = $00060001;
  GLFW_PLATFORM_COCOA = $00060002;
  GLFW_PLATFORM_WAYLAND = $00060003;
  GLFW_PLATFORM_X11 = $00060004;
  GLFW_PLATFORM_NULL = $00060005;
  GLFW_DONT_CARE = -1;
  AL_INVALID = (-1);
  AL_INVALID_ENUM = $A002;
  AL_ILLEGAL_ENUM = AL_INVALID_ENUM;
  AL_INVALID_OPERATION = $A004;
  AL_ILLEGAL_COMMAND = AL_INVALID_OPERATION;
  AL_NONE = 0;
  AL_FALSE = 0;
  AL_TRUE = 1;
  AL_SOURCE_RELATIVE = $202;
  AL_CONE_INNER_ANGLE = $1001;
  AL_CONE_OUTER_ANGLE = $1002;
  AL_PITCH = $1003;
  AL_POSITION = $1004;
  AL_DIRECTION = $1005;
  AL_VELOCITY = $1006;
  AL_LOOPING = $1007;
  AL_BUFFER = $1009;
  AL_GAIN = $100A;
  AL_MIN_GAIN = $100D;
  AL_MAX_GAIN = $100E;
  AL_ORIENTATION = $100F;
  AL_SOURCE_STATE = $1010;
  AL_INITIAL = $1011;
  AL_PLAYING = $1012;
  AL_PAUSED = $1013;
  AL_STOPPED = $1014;
  AL_BUFFERS_QUEUED = $1015;
  AL_BUFFERS_PROCESSED = $1016;
  AL_REFERENCE_DISTANCE = $1020;
  AL_ROLLOFF_FACTOR = $1021;
  AL_CONE_OUTER_GAIN = $1022;
  AL_MAX_DISTANCE = $1023;
  AL_SEC_OFFSET = $1024;
  AL_SAMPLE_OFFSET = $1025;
  AL_BYTE_OFFSET = $1026;
  AL_SOURCE_TYPE = $1027;
  AL_STATIC = $1028;
  AL_STREAMING = $1029;
  AL_UNDETERMINED = $1030;
  AL_FORMAT_MONO8 = $1100;
  AL_FORMAT_MONO16 = $1101;
  AL_FORMAT_STEREO8 = $1102;
  AL_FORMAT_STEREO16 = $1103;
  AL_FREQUENCY = $2001;
  AL_BITS = $2002;
  AL_CHANNELS = $2003;
  AL_SIZE = $2004;
  AL_UNUSED = $2010;
  AL_PENDING = $2011;
  AL_PROCESSED = $2012;
  AL_NO_ERROR = 0;
  AL_INVALID_NAME = $A001;
  AL_INVALID_VALUE = $A003;
  AL_OUT_OF_MEMORY = $A005;
  AL_VENDOR = $B001;
  AL_VERSION = $B002;
  AL_RENDERER = $B003;
  AL_EXTENSIONS = $B004;
  AL_DOPPLER_FACTOR = $C000;
  AL_DOPPLER_VELOCITY = $C001;
  AL_SPEED_OF_SOUND = $C003;
  AL_DISTANCE_MODEL = $D000;
  AL_INVERSE_DISTANCE = $D001;
  AL_INVERSE_DISTANCE_CLAMPED = $D002;
  AL_LINEAR_DISTANCE = $D003;
  AL_LINEAR_DISTANCE_CLAMPED = $D004;
  AL_EXPONENT_DISTANCE = $D005;
  AL_EXPONENT_DISTANCE_CLAMPED = $D006;
  ALC_INVALID = 0;
  ALC_VERSION_0_1 = 1;
  ALC_FALSE = 0;
  ALC_TRUE = 1;
  ALC_FREQUENCY = $1007;
  ALC_REFRESH = $1008;
  ALC_SYNC = $1009;
  ALC_MONO_SOURCES = $1010;
  ALC_STEREO_SOURCES = $1011;
  ALC_NO_ERROR = 0;
  ALC_INVALID_DEVICE = $A001;
  ALC_INVALID_CONTEXT = $A002;
  ALC_INVALID_ENUM = $A003;
  ALC_INVALID_VALUE = $A004;
  ALC_OUT_OF_MEMORY = $A005;
  ALC_MAJOR_VERSION = $1000;
  ALC_MINOR_VERSION = $1001;
  ALC_ATTRIBUTES_SIZE = $1002;
  ALC_ALL_ATTRIBUTES = $1003;
  ALC_DEFAULT_DEVICE_SPECIFIER = $1004;
  ALC_DEVICE_SPECIFIER = $1005;
  ALC_EXTENSIONS = $1006;
  ALC_EXT_CAPTURE = 1;
  ALC_CAPTURE_DEVICE_SPECIFIER = $310;
  ALC_CAPTURE_DEFAULT_DEVICE_SPECIFIER = $311;
  ALC_CAPTURE_SAMPLES = $312;
  ALC_ENUMERATE_ALL_EXT = 1;
  ALC_DEFAULT_ALL_DEVICES_SPECIFIER = $1012;
  ALC_ALL_DEVICES_SPECIFIER = $1013;
  NOTOPEN = 0;
  PARTOPEN = 1;
  OPENED = 2;
  STREAMSET = 3;
  INITSET = 4;
  Z_ERRNO = -1;
  Z_OK = 0;
  Z_DEFLATED = 8;
  Z_DEFAULT_STRATEGY = 0;
  ZIP_OK = (0);
  ZIP_EOF = (0);
  ZIP_ERRNO = (Z_ERRNO);
  ZIP_PARAMERROR = (-102);
  ZIP_BADZIPFILE = (-103);
  ZIP_INTERNALERROR = (-104);
  UNZ_OK = (0);
  UNZ_END_OF_LIST_OF_FILE = (-100);
  UNZ_ERRNO = (Z_ERRNO);
  UNZ_EOF = (0);
  UNZ_PARAMERROR = (-102);
  UNZ_BADZIPFILE = (-103);
  UNZ_INTERNALERROR = (-104);
  UNZ_CRCERROR = (-105);
  APPEND_STATUS_CREATE = (0);
  APPEND_STATUS_CREATEAFTER = (1);
  APPEND_STATUS_ADDINZIP = (2);
  C2_MAX_POLYGON_VERTS = 8;
  PLM_PACKET_INVALID_TS = -1;
  PLM_AUDIO_SAMPLES_PER_FRAME = 1152;
  PLM_BUFFER_DEFAULT_SIZE = (128*1024);
  STBI_VERSION = 1;
  STBTT_MACSTYLE_DONTCARE = 0;
  STBTT_MACSTYLE_BOLD = 1;
  STBTT_MACSTYLE_ITALIC = 2;
  STBTT_MACSTYLE_UNDERSCORE = 4;
  STBTT_MACSTYLE_NONE = 8;

type
  C2_TYPE = Integer;
  PC2_TYPE = ^C2_TYPE;

const
  C2_TYPE_CIRCLE = 0;
  C2_TYPE_AABB = 1;
  C2_TYPE_CAPSULE = 2;
  C2_TYPE_POLY = 3;

const
  STBI_default = 0;
  STBI_grey = 1;
  STBI_grey_alpha = 2;
  STBI_rgb = 3;
  STBI_rgb_alpha = 4;

const
  STBTT_vmove = 1;
  STBTT_vline = 2;
  STBTT_vcurve = 3;
  STBTT_vcubic = 4;

const
  STBTT_PLATFORM_ID_UNICODE = 0;
  STBTT_PLATFORM_ID_MAC = 1;
  STBTT_PLATFORM_ID_ISO = 2;
  STBTT_PLATFORM_ID_MICROSOFT = 3;

const
  STBTT_UNICODE_EID_UNICODE_1_0 = 0;
  STBTT_UNICODE_EID_UNICODE_1_1 = 1;
  STBTT_UNICODE_EID_ISO_10646 = 2;
  STBTT_UNICODE_EID_UNICODE_2_0_BMP = 3;
  STBTT_UNICODE_EID_UNICODE_2_0_FULL = 4;

const
  STBTT_MS_EID_SYMBOL = 0;
  STBTT_MS_EID_UNICODE_BMP = 1;
  STBTT_MS_EID_SHIFTJIS = 2;
  STBTT_MS_EID_UNICODE_FULL = 10;

const
  STBTT_MAC_EID_ROMAN = 0;
  STBTT_MAC_EID_ARABIC = 4;
  STBTT_MAC_EID_JAPANESE = 1;
  STBTT_MAC_EID_HEBREW = 5;
  STBTT_MAC_EID_CHINESE_TRAD = 2;
  STBTT_MAC_EID_GREEK = 6;
  STBTT_MAC_EID_KOREAN = 3;
  STBTT_MAC_EID_RUSSIAN = 7;

const
  STBTT_MS_LANG_ENGLISH = 1033;
  STBTT_MS_LANG_ITALIAN = 1040;
  STBTT_MS_LANG_CHINESE = 2052;
  STBTT_MS_LANG_JAPANESE = 1041;
  STBTT_MS_LANG_DUTCH = 1043;
  STBTT_MS_LANG_KOREAN = 1042;
  STBTT_MS_LANG_FRENCH = 1036;
  STBTT_MS_LANG_RUSSIAN = 1049;
  STBTT_MS_LANG_GERMAN = 1031;
  STBTT_MS_LANG_SPANISH = 1033;
  STBTT_MS_LANG_HEBREW = 1037;
  STBTT_MS_LANG_SWEDISH = 1053;

const
  STBTT_MAC_LANG_ENGLISH = 0;
  STBTT_MAC_LANG_JAPANESE = 11;
  STBTT_MAC_LANG_ARABIC = 12;
  STBTT_MAC_LANG_KOREAN = 23;
  STBTT_MAC_LANG_DUTCH = 4;
  STBTT_MAC_LANG_RUSSIAN = 32;
  STBTT_MAC_LANG_FRENCH = 1;
  STBTT_MAC_LANG_SPANISH = 6;
  STBTT_MAC_LANG_GERMAN = 2;
  STBTT_MAC_LANG_SWEDISH = 5;
  STBTT_MAC_LANG_HEBREW = 10;
  STBTT_MAC_LANG_CHINESE_SIMPLIFIED = 33;
  STBTT_MAC_LANG_ITALIAN = 3;
  STBTT_MAC_LANG_CHINESE_TRAD = 19;

type
  PPUTF8Char = ^PUTF8Char;
  PPInteger = ^PInteger;
  PPSingle = ^PSingle;
  PPPSingle = ^PPSingle;
  PUInt8 = ^UInt8;
  PUInt32 = ^UInt32;
  Palloc_chain = Pointer;
  PPalloc_chain = ^Palloc_chain;
  PGLFWvidmode = ^GLFWvidmode;
  PGLFWgammaramp = ^GLFWgammaramp;
  PGLFWimage = ^GLFWimage;
  PGLFWgamepadstate = ^GLFWgamepadstate;
  PGLFWallocator = ^GLFWallocator;
  Pogg_sync_state = ^ogg_sync_state;
  Pvorbis_info = ^vorbis_info;
  Pvorbis_comment = ^vorbis_comment;
  Pogg_stream_state = ^ogg_stream_state;
  Pvorbis_dsp_state = ^vorbis_dsp_state;
  Poggpack_buffer = ^oggpack_buffer;
  Pvorbis_block = ^vorbis_block;
  Pov_callbacks = ^ov_callbacks;
  POggVorbis_File = ^OggVorbis_File;
  Ptm_zip_s = ^tm_zip_s;
  Pzip_fileinfo = ^zip_fileinfo;
  Ptm_unz_s = ^tm_unz_s;
  Punz_file_info64_s = ^unz_file_info64_s;
  Pc2v = ^c2v;
  Pc2r = ^c2r;
  Pc2m = ^c2m;
  Pc2x = ^c2x;
  Pc2h = ^c2h;
  Pc2Circle = ^c2Circle;
  Pc2AABB = ^c2AABB;
  Pc2Capsule = ^c2Capsule;
  Pc2Poly = ^c2Poly;
  Pc2Ray = ^c2Ray;
  Pc2Raycast = ^c2Raycast;
  Pc2Manifold = ^c2Manifold;
  Pc2GJKCache = ^c2GJKCache;
  Pc2TOIResult = ^c2TOIResult;
  Pplm_packet_t = ^plm_packet_t;
  Pplm_plane_t = ^plm_plane_t;
  Pplm_frame_t = ^plm_frame_t;
  Pplm_samples_t = ^plm_samples_t;
  Pstbi_io_callbacks = ^stbi_io_callbacks;
  Pstbtt__buf = ^stbtt__buf;
  Pstbtt_bakedchar = ^stbtt_bakedchar;
  Pstbtt_aligned_quad = ^stbtt_aligned_quad;
  Pstbtt_packedchar = ^stbtt_packedchar;
  Pstbtt_pack_range = ^stbtt_pack_range;
  Pstbtt_pack_context = ^stbtt_pack_context;
  Pstbtt_fontinfo = ^stbtt_fontinfo;
  Pstbtt_kerningentry = ^stbtt_kerningentry;
  Pstbtt_vertex = ^stbtt_vertex;
  PPstbtt_vertex = ^Pstbtt_vertex;
  Pstbtt__bitmap = ^stbtt__bitmap;

  GLFWglproc = procedure(); cdecl;

  GLFWvkproc = procedure(); cdecl;
  PGLFWmonitor = Pointer;
  PPGLFWmonitor = ^PGLFWmonitor;
  PGLFWwindow = Pointer;
  PPGLFWwindow = ^PGLFWwindow;
  PGLFWcursor = Pointer;
  PPGLFWcursor = ^PGLFWcursor;

  GLFWallocatefun = function(size: NativeUInt; user: Pointer): Pointer; cdecl;

  GLFWreallocatefun = function(block: Pointer; size: NativeUInt; user: Pointer): Pointer; cdecl;

  GLFWdeallocatefun = procedure(block: Pointer; user: Pointer); cdecl;

  GLFWerrorfun = procedure(error_code: Integer; const description: PUTF8Char); cdecl;

  GLFWwindowposfun = procedure(window: PGLFWwindow; xpos: Integer; ypos: Integer); cdecl;

  GLFWwindowsizefun = procedure(window: PGLFWwindow; width: Integer; height: Integer); cdecl;

  GLFWwindowclosefun = procedure(window: PGLFWwindow); cdecl;

  GLFWwindowrefreshfun = procedure(window: PGLFWwindow); cdecl;

  GLFWwindowfocusfun = procedure(window: PGLFWwindow; focused: Integer); cdecl;

  GLFWwindowiconifyfun = procedure(window: PGLFWwindow; iconified: Integer); cdecl;

  GLFWwindowmaximizefun = procedure(window: PGLFWwindow; maximized: Integer); cdecl;

  GLFWframebuffersizefun = procedure(window: PGLFWwindow; width: Integer; height: Integer); cdecl;

  GLFWwindowcontentscalefun = procedure(window: PGLFWwindow; xscale: Single; yscale: Single); cdecl;

  GLFWmousebuttonfun = procedure(window: PGLFWwindow; button: Integer; action: Integer; mods: Integer); cdecl;

  GLFWcursorposfun = procedure(window: PGLFWwindow; xpos: Double; ypos: Double); cdecl;

  GLFWcursorenterfun = procedure(window: PGLFWwindow; entered: Integer); cdecl;

  GLFWscrollfun = procedure(window: PGLFWwindow; xoffset: Double; yoffset: Double); cdecl;

  GLFWkeyfun = procedure(window: PGLFWwindow; key: Integer; scancode: Integer; action: Integer; mods: Integer); cdecl;

  GLFWcharfun = procedure(window: PGLFWwindow; codepoint: Cardinal); cdecl;

  GLFWcharmodsfun = procedure(window: PGLFWwindow; codepoint: Cardinal; mods: Integer); cdecl;

  GLFWdropfun = procedure(window: PGLFWwindow; path_count: Integer; paths: PPUTF8Char); cdecl;

  GLFWmonitorfun = procedure(monitor: PGLFWmonitor; event: Integer); cdecl;

  GLFWjoystickfun = procedure(jid: Integer; event: Integer); cdecl;

  GLFWvidmode = record
    width: Integer;
    height: Integer;
    redBits: Integer;
    greenBits: Integer;
    blueBits: Integer;
    refreshRate: Integer;
  end;

  GLFWgammaramp = record
    red: PWord;
    green: PWord;
    blue: PWord;
    size: Cardinal;
  end;

  GLFWimage = record
    width: Integer;
    height: Integer;
    pixels: PByte;
  end;

  GLFWgamepadstate = record
    buttons: array [0..14] of Byte;
    axes: array [0..5] of Single;
  end;

  GLFWallocator = record
    allocate: GLFWallocatefun;
    reallocate: GLFWreallocatefun;
    deallocate: GLFWdeallocatefun;
    user: Pointer;
  end;

  ALboolean = UTF8Char;
  PALboolean = PUTF8Char;
  ALchar = UTF8Char;
  PALchar = PUTF8Char;
  ALbyte = UTF8Char;
  ALubyte = Byte;
  ALshort = Smallint;
  ALushort = Word;
  ALint = Integer;
  PALint = ^ALint;
  ALuint = Cardinal;
  PALuint = ^ALuint;
  ALsizei = Integer;
  ALenum = Integer;
  ALfloat = Single;
  PALfloat = ^ALfloat;
  ALdouble = Double;
  PALdouble = ^ALdouble;
  PALvoid = Pointer;
  PPALvoid = ^PALvoid;
  PALCdevice = Pointer;
  PPALCdevice = ^PALCdevice;
  PALCcontext = Pointer;
  PPALCcontext = ^PALCcontext;
  ALCboolean = UTF8Char;
  ALCchar = UTF8Char;
  PALCchar = PUTF8Char;
  ALCbyte = UTF8Char;
  ALCubyte = Byte;
  ALCshort = Smallint;
  ALCushort = Word;
  ALCint = Integer;
  PALCint = ^ALCint;
  ALCuint = Cardinal;
  ALCsizei = Integer;
  ALCenum = Integer;
  ALCfloat = Single;
  ALCdouble = Double;
  PALCvoid = Pointer;
  PPALCvoid = ^PALCvoid;
  ogg_int16_t = Int16;
  ogg_uint16_t = UInt16;
  ogg_int32_t = Int32;
  ogg_uint32_t = UInt32;
  ogg_int64_t = Int64;
  Pogg_int64_t = ^ogg_int64_t;
  ogg_uint64_t = UInt64;

  ogg_sync_state = record
    data: PByte;
    storage: Integer;
    fill: Integer;
    returned: Integer;
    unsynced: Integer;
    headerbytes: Integer;
    bodybytes: Integer;
  end;

  vorbis_info = record
    version: Integer;
    channels: Integer;
    rate: Integer;
    bitrate_upper: Integer;
    bitrate_nominal: Integer;
    bitrate_lower: Integer;
    bitrate_window: Integer;
    codec_setup: Pointer;
  end;

  vorbis_comment = record
    user_comments: PPUTF8Char;
    comment_lengths: PInteger;
    comments: Integer;
    vendor: PUTF8Char;
  end;

  ogg_stream_state = record
    body_data: PByte;
    body_storage: Integer;
    body_fill: Integer;
    body_returned: Integer;
    lacing_vals: PInteger;
    granule_vals: Pogg_int64_t;
    lacing_storage: Integer;
    lacing_fill: Integer;
    lacing_packet: Integer;
    lacing_returned: Integer;
    header: array [0..281] of Byte;
    header_fill: Integer;
    e_o_s: Integer;
    b_o_s: Integer;
    serialno: Integer;
    pageno: Integer;
    packetno: ogg_int64_t;
    granulepos: ogg_int64_t;
  end;

  vorbis_dsp_state = record
    analysisp: Integer;
    vi: Pvorbis_info;
    pcm: PPSingle;
    pcmret: PPSingle;
    pcm_storage: Integer;
    pcm_current: Integer;
    pcm_returned: Integer;
    preextrapolate: Integer;
    eofflag: Integer;
    lW: Integer;
    W: Integer;
    nW: Integer;
    centerW: Integer;
    granulepos: ogg_int64_t;
    sequence: ogg_int64_t;
    glue_bits: ogg_int64_t;
    time_bits: ogg_int64_t;
    floor_bits: ogg_int64_t;
    res_bits: ogg_int64_t;
    backend_state: Pointer;
  end;

  oggpack_buffer = record
    endbyte: Integer;
    endbit: Integer;
    buffer: PByte;
    ptr: PByte;
    storage: Integer;
  end;

  vorbis_block = record
    pcm: PPSingle;
    opb: oggpack_buffer;
    lW: Integer;
    W: Integer;
    nW: Integer;
    pcmend: Integer;
    mode: Integer;
    eofflag: Integer;
    granulepos: ogg_int64_t;
    sequence: ogg_int64_t;
    vd: Pvorbis_dsp_state;
    localstore: Pointer;
    localtop: Integer;
    localalloc: Integer;
    totaluse: Integer;
    reap: Palloc_chain;
    glue_bits: Integer;
    time_bits: Integer;
    floor_bits: Integer;
    res_bits: Integer;
    internal: Pointer;
  end;

  ov_callbacks = record
    read_func: function(ptr: Pointer; size: NativeUInt; nmemb: NativeUInt; datasource: Pointer): NativeUInt; cdecl;
    seek_func: function(datasource: Pointer; offset: ogg_int64_t; whence: Integer): Integer; cdecl;
    close_func: function(datasource: Pointer): Integer; cdecl;
    tell_func: function(datasource: Pointer): Integer; cdecl;
  end;

  OggVorbis_File = record
    datasource: Pointer;
    seekable: Integer;
    offset: ogg_int64_t;
    &end: ogg_int64_t;
    oy: ogg_sync_state;
    links: Integer;
    offsets: Pogg_int64_t;
    dataoffsets: Pogg_int64_t;
    serialnos: PInteger;
    pcmlengths: Pogg_int64_t;
    vi: Pvorbis_info;
    vc: Pvorbis_comment;
    pcm_offset: ogg_int64_t;
    ready_state: Integer;
    current_serialno: Integer;
    current_link: Integer;
    bittrack: Double;
    samptrack: Double;
    os: ogg_stream_state;
    vd: vorbis_dsp_state;
    vb: vorbis_block;
    callbacks: ov_callbacks;
  end;

  voidp = Pointer;
  unzFile = voidp;
  zipFile = voidp;
  uInt = Cardinal;
  uLong = Cardinal;
  Bytef = &Byte;
  PBytef = ^Bytef;

  tm_zip_s = record
    tm_sec: Integer;
    tm_min: Integer;
    tm_hour: Integer;
    tm_mday: Integer;
    tm_mon: Integer;
    tm_year: Integer;
  end;

  tm_zip = tm_zip_s;

  zip_fileinfo = record
    tmz_date: tm_zip;
    dosDate: uLong;
    internal_fa: uLong;
    external_fa: uLong;
  end;

  tm_unz_s = record
    tm_sec: Integer;
    tm_min: Integer;
    tm_hour: Integer;
    tm_mday: Integer;
    tm_mon: Integer;
    tm_year: Integer;
  end;

  tm_unz = tm_unz_s;

  unz_file_info64_s = record
    version: uLong;
    version_needed: uLong;
    flag: uLong;
    compression_method: uLong;
    dosDate: uLong;
    crc: uLong;
    compressed_size: UInt64;
    uncompressed_size: UInt64;
    size_filename: uLong;
    size_file_extra: uLong;
    size_file_comment: uLong;
    disk_num_start: uLong;
    internal_fa: uLong;
    external_fa: uLong;
    tmu_date: tm_unz;
  end;

  unz_file_info64 = unz_file_info64_s;
  Punz_file_info64 = ^unz_file_info64;

  c2v = record
    x: Single;
    y: Single;
  end;

  c2r = record
    c: Single;
    s: Single;
  end;

  c2m = record
    x: c2v;
    y: c2v;
  end;

  c2x = record
    p: c2v;
    r: c2r;
  end;

  c2h = record
    n: c2v;
    d: Single;
  end;

  c2Circle = record
    p: c2v;
    r: Single;
  end;

  c2AABB = record
    min: c2v;
    max: c2v;
  end;

  c2Capsule = record
    a: c2v;
    b: c2v;
    r: Single;
  end;

  c2Poly = record
    count: Integer;
    verts: array [0..7] of c2v;
    norms: array [0..7] of c2v;
  end;

  c2Ray = record
    p: c2v;
    d: c2v;
    t: Single;
  end;

  c2Raycast = record
    t: Single;
    n: c2v;
  end;

  c2Manifold = record
    count: Integer;
    depths: array [0..1] of Single;
    contact_points: array [0..1] of c2v;
    n: c2v;
  end;

  c2GJKCache = record
    metric: Single;
    count: Integer;
    iA: array [0..2] of Integer;
    iB: array [0..2] of Integer;
    &div: Single;
  end;

  c2TOIResult = record
    hit: Integer;
    toi: Single;
    n: c2v;
    p: c2v;
    iterations: Integer;
  end;

  Pplm_t = Pointer;
  PPplm_t = ^Pplm_t;
  Pplm_buffer_t = Pointer;
  PPplm_buffer_t = ^Pplm_buffer_t;
  Pplm_demux_t = Pointer;
  PPplm_demux_t = ^Pplm_demux_t;
  Pplm_video_t = Pointer;
  PPplm_video_t = ^Pplm_video_t;
  Pplm_audio_t = Pointer;
  PPplm_audio_t = ^Pplm_audio_t;

  plm_packet_t = record
    &type: Integer;
    pts: Double;
    length: NativeUInt;
    data: PUInt8;
  end;

  plm_plane_t = record
    width: Cardinal;
    height: Cardinal;
    data: PUInt8;
  end;

  plm_frame_t = record
    time: Double;
    width: Cardinal;
    height: Cardinal;
    y: plm_plane_t;
    cr: plm_plane_t;
    cb: plm_plane_t;
  end;

  plm_video_decode_callback = procedure(self: Pplm_t; frame: Pplm_frame_t; user: Pointer); cdecl;

  plm_samples_t = record
    time: Double;
    count: Cardinal;
    interleaved: array [0..2303] of Single;
  end;

  plm_audio_decode_callback = procedure(self: Pplm_t; samples: Pplm_samples_t; user: Pointer); cdecl;

  plm_buffer_load_callback = procedure(self: Pplm_buffer_t; user: Pointer); cdecl;
  stbi_uc = Byte;
  Pstbi_uc = ^stbi_uc;
  stbi_us = Word;
  Pstbi_us = ^stbi_us;

  stbi_io_callbacks = record
    read: function(user: Pointer; data: PUTF8Char; size: Integer): Integer; cdecl;
    skip: procedure(user: Pointer; n: Integer); cdecl;
    eof: function(user: Pointer): Integer; cdecl;
  end;

  Pstbi_write_func = procedure(context: Pointer; data: Pointer; size: Integer); cdecl;

  stbtt__buf = record
    data: PByte;
    cursor: Integer;
    size: Integer;
  end;

  stbtt_bakedchar = record
    x0: Word;
    y0: Word;
    x1: Word;
    y1: Word;
    xoff: Single;
    yoff: Single;
    xadvance: Single;
  end;

  stbtt_aligned_quad = record
    x0: Single;
    y0: Single;
    s0: Single;
    t0: Single;
    x1: Single;
    y1: Single;
    s1: Single;
    t1: Single;
  end;

  stbtt_packedchar = record
    x0: Word;
    y0: Word;
    x1: Word;
    y1: Word;
    xoff: Single;
    yoff: Single;
    xadvance: Single;
    xoff2: Single;
    yoff2: Single;
  end;

  Pstbrp_rect = Pointer;
  PPstbrp_rect = ^Pstbrp_rect;

  stbtt_pack_range = record
    font_size: Single;
    first_unicode_codepoint_in_range: Integer;
    array_of_unicode_codepoints: PInteger;
    num_chars: Integer;
    chardata_for_range: Pstbtt_packedchar;
    h_oversample: Byte;
    v_oversample: Byte;
  end;

  stbtt_pack_context = record
    user_allocator_context: Pointer;
    pack_info: Pointer;
    width: Integer;
    height: Integer;
    stride_in_bytes: Integer;
    padding: Integer;
    skip_missing: Integer;
    h_oversample: Cardinal;
    v_oversample: Cardinal;
    pixels: PByte;
    nodes: Pointer;
  end;

  stbtt_fontinfo = record
    userdata: Pointer;
    data: PByte;
    fontstart: Integer;
    numGlyphs: Integer;
    loca: Integer;
    head: Integer;
    glyf: Integer;
    hhea: Integer;
    hmtx: Integer;
    kern: Integer;
    gpos: Integer;
    svg: Integer;
    index_map: Integer;
    indexToLocFormat: Integer;
    cff: stbtt__buf;
    charstrings: stbtt__buf;
    gsubrs: stbtt__buf;
    subrs: stbtt__buf;
    fontdicts: stbtt__buf;
    fdselect: stbtt__buf;
  end;

  stbtt_kerningentry = record
    glyph1: Integer;
    glyph2: Integer;
    advance: Integer;
  end;

  stbtt_vertex = record
    x: Smallint;
    y: Smallint;
    cx: Smallint;
    cy: Smallint;
    cx1: Smallint;
    cy1: Smallint;
    &type: Byte;
    padding: Byte;
  end;

  stbtt__bitmap = record
    w: Integer;
    h: Integer;
    stride: Integer;
    pixels: PByte;
  end;

const
  PLM_DEMUX_PACKET_PRIVATE: Integer = $BD;
  PLM_DEMUX_PACKET_AUDIO_1: Integer = $C0;
  PLM_DEMUX_PACKET_AUDIO_2: Integer = $C1;
  PLM_DEMUX_PACKET_AUDIO_3: Integer = $C2;
  PLM_DEMUX_PACKET_AUDIO_4: Integer = $C2;
  PLM_DEMUX_PACKET_VIDEO_1: Integer = $E0;

type
  ov_read_filter_filter = procedure(pcm: PPSingle; channels: Integer; samples: Integer; filter_param: Pointer); cdecl;

var
  glfwInit: function(): Integer; cdecl;
  glfwTerminate: procedure(); cdecl;
  glfwInitHint: procedure(hint: Integer; value: Integer); cdecl;
  glfwInitAllocator: procedure(const allocator: PGLFWallocator); cdecl;
  glfwGetVersion: procedure(major: PInteger; minor: PInteger; rev: PInteger); cdecl;
  glfwGetVersionString: function(): PUTF8Char; cdecl;
  glfwGetError: function(description: PPUTF8Char): Integer; cdecl;
  glfwSetErrorCallback: function(callback: GLFWerrorfun): GLFWerrorfun; cdecl;
  glfwGetPlatform: function(): Integer; cdecl;
  glfwPlatformSupported: function(&platform: Integer): Integer; cdecl;
  glfwGetMonitors: function(count: PInteger): PPGLFWmonitor; cdecl;
  glfwGetPrimaryMonitor: function(): PGLFWmonitor; cdecl;
  glfwGetMonitorPos: procedure(monitor: PGLFWmonitor; xpos: PInteger; ypos: PInteger); cdecl;
  glfwGetMonitorWorkarea: procedure(monitor: PGLFWmonitor; xpos: PInteger; ypos: PInteger; width: PInteger; height: PInteger); cdecl;
  glfwGetMonitorPhysicalSize: procedure(monitor: PGLFWmonitor; widthMM: PInteger; heightMM: PInteger); cdecl;
  glfwGetMonitorContentScale: procedure(monitor: PGLFWmonitor; xscale: PSingle; yscale: PSingle); cdecl;
  glfwGetMonitorName: function(monitor: PGLFWmonitor): PUTF8Char; cdecl;
  glfwSetMonitorUserPointer: procedure(monitor: PGLFWmonitor; pointer: Pointer); cdecl;
  glfwGetMonitorUserPointer: function(monitor: PGLFWmonitor): Pointer; cdecl;
  glfwSetMonitorCallback: function(callback: GLFWmonitorfun): GLFWmonitorfun; cdecl;
  glfwGetVideoModes: function(monitor: PGLFWmonitor; count: PInteger): PGLFWvidmode; cdecl;
  glfwGetVideoMode: function(monitor: PGLFWmonitor): PGLFWvidmode; cdecl;
  glfwSetGamma: procedure(monitor: PGLFWmonitor; gamma: Single); cdecl;
  glfwGetGammaRamp: function(monitor: PGLFWmonitor): PGLFWgammaramp; cdecl;
  glfwSetGammaRamp: procedure(monitor: PGLFWmonitor; const ramp: PGLFWgammaramp); cdecl;
  glfwDefaultWindowHints: procedure(); cdecl;
  glfwWindowHint: procedure(hint: Integer; value: Integer); cdecl;
  glfwWindowHintString: procedure(hint: Integer; const value: PUTF8Char); cdecl;
  glfwCreateWindow: function(width: Integer; height: Integer; const title: PUTF8Char; monitor: PGLFWmonitor; share: PGLFWwindow): PGLFWwindow; cdecl;
  glfwDestroyWindow: procedure(window: PGLFWwindow); cdecl;
  glfwWindowShouldClose: function(window: PGLFWwindow): Integer; cdecl;
  glfwSetWindowShouldClose: procedure(window: PGLFWwindow; value: Integer); cdecl;
  glfwSetWindowTitle: procedure(window: PGLFWwindow; const title: PUTF8Char); cdecl;
  glfwSetWindowIcon: procedure(window: PGLFWwindow; count: Integer; const images: PGLFWimage); cdecl;
  glfwGetWindowPos: procedure(window: PGLFWwindow; xpos: PInteger; ypos: PInteger); cdecl;
  glfwSetWindowPos: procedure(window: PGLFWwindow; xpos: Integer; ypos: Integer); cdecl;
  glfwGetWindowSize: procedure(window: PGLFWwindow; width: PInteger; height: PInteger); cdecl;
  glfwSetWindowSizeLimits: procedure(window: PGLFWwindow; minwidth: Integer; minheight: Integer; maxwidth: Integer; maxheight: Integer); cdecl;
  glfwSetWindowAspectRatio: procedure(window: PGLFWwindow; numer: Integer; denom: Integer); cdecl;
  glfwSetWindowSize: procedure(window: PGLFWwindow; width: Integer; height: Integer); cdecl;
  glfwGetFramebufferSize: procedure(window: PGLFWwindow; width: PInteger; height: PInteger); cdecl;
  glfwGetWindowFrameSize: procedure(window: PGLFWwindow; left: PInteger; top: PInteger; right: PInteger; bottom: PInteger); cdecl;
  glfwGetWindowContentScale: procedure(window: PGLFWwindow; xscale: PSingle; yscale: PSingle); cdecl;
  glfwGetWindowOpacity: function(window: PGLFWwindow): Single; cdecl;
  glfwSetWindowOpacity: procedure(window: PGLFWwindow; opacity: Single); cdecl;
  glfwIconifyWindow: procedure(window: PGLFWwindow); cdecl;
  glfwRestoreWindow: procedure(window: PGLFWwindow); cdecl;
  glfwMaximizeWindow: procedure(window: PGLFWwindow); cdecl;
  glfwShowWindow: procedure(window: PGLFWwindow); cdecl;
  glfwHideWindow: procedure(window: PGLFWwindow); cdecl;
  glfwFocusWindow: procedure(window: PGLFWwindow); cdecl;
  glfwRequestWindowAttention: procedure(window: PGLFWwindow); cdecl;
  glfwGetWindowMonitor: function(window: PGLFWwindow): PGLFWmonitor; cdecl;
  glfwSetWindowMonitor: procedure(window: PGLFWwindow; monitor: PGLFWmonitor; xpos: Integer; ypos: Integer; width: Integer; height: Integer; refreshRate: Integer); cdecl;
  glfwGetWindowAttrib: function(window: PGLFWwindow; attrib: Integer): Integer; cdecl;
  glfwSetWindowAttrib: procedure(window: PGLFWwindow; attrib: Integer; value: Integer); cdecl;
  glfwSetWindowUserPointer: procedure(window: PGLFWwindow; pointer: Pointer); cdecl;
  glfwGetWindowUserPointer: function(window: PGLFWwindow): Pointer; cdecl;
  glfwSetWindowPosCallback: function(window: PGLFWwindow; callback: GLFWwindowposfun): GLFWwindowposfun; cdecl;
  glfwSetWindowSizeCallback: function(window: PGLFWwindow; callback: GLFWwindowsizefun): GLFWwindowsizefun; cdecl;
  glfwSetWindowCloseCallback: function(window: PGLFWwindow; callback: GLFWwindowclosefun): GLFWwindowclosefun; cdecl;
  glfwSetWindowRefreshCallback: function(window: PGLFWwindow; callback: GLFWwindowrefreshfun): GLFWwindowrefreshfun; cdecl;
  glfwSetWindowFocusCallback: function(window: PGLFWwindow; callback: GLFWwindowfocusfun): GLFWwindowfocusfun; cdecl;
  glfwSetWindowIconifyCallback: function(window: PGLFWwindow; callback: GLFWwindowiconifyfun): GLFWwindowiconifyfun; cdecl;
  glfwSetWindowMaximizeCallback: function(window: PGLFWwindow; callback: GLFWwindowmaximizefun): GLFWwindowmaximizefun; cdecl;
  glfwSetFramebufferSizeCallback: function(window: PGLFWwindow; callback: GLFWframebuffersizefun): GLFWframebuffersizefun; cdecl;
  glfwSetWindowContentScaleCallback: function(window: PGLFWwindow; callback: GLFWwindowcontentscalefun): GLFWwindowcontentscalefun; cdecl;
  glfwPollEvents: procedure(); cdecl;
  glfwWaitEvents: procedure(); cdecl;
  glfwWaitEventsTimeout: procedure(timeout: Double); cdecl;
  glfwPostEmptyEvent: procedure(); cdecl;
  glfwGetInputMode: function(window: PGLFWwindow; mode: Integer): Integer; cdecl;
  glfwSetInputMode: procedure(window: PGLFWwindow; mode: Integer; value: Integer); cdecl;
  glfwRawMouseMotionSupported: function(): Integer; cdecl;
  glfwGetKeyName: function(key: Integer; scancode: Integer): PUTF8Char; cdecl;
  glfwGetKeyScancode: function(key: Integer): Integer; cdecl;
  glfwGetKey: function(window: PGLFWwindow; key: Integer): Integer; cdecl;
  glfwGetMouseButton: function(window: PGLFWwindow; button: Integer): Integer; cdecl;
  glfwGetCursorPos: procedure(window: PGLFWwindow; xpos: PDouble; ypos: PDouble); cdecl;
  glfwSetCursorPos: procedure(window: PGLFWwindow; xpos: Double; ypos: Double); cdecl;
  glfwCreateCursor: function(const image: PGLFWimage; xhot: Integer; yhot: Integer): PGLFWcursor; cdecl;
  glfwCreateStandardCursor: function(shape: Integer): PGLFWcursor; cdecl;
  glfwDestroyCursor: procedure(cursor: PGLFWcursor); cdecl;
  glfwSetCursor: procedure(window: PGLFWwindow; cursor: PGLFWcursor); cdecl;
  glfwSetKeyCallback: function(window: PGLFWwindow; callback: GLFWkeyfun): GLFWkeyfun; cdecl;
  glfwSetCharCallback: function(window: PGLFWwindow; callback: GLFWcharfun): GLFWcharfun; cdecl;
  glfwSetCharModsCallback: function(window: PGLFWwindow; callback: GLFWcharmodsfun): GLFWcharmodsfun; cdecl;
  glfwSetMouseButtonCallback: function(window: PGLFWwindow; callback: GLFWmousebuttonfun): GLFWmousebuttonfun; cdecl;
  glfwSetCursorPosCallback: function(window: PGLFWwindow; callback: GLFWcursorposfun): GLFWcursorposfun; cdecl;
  glfwSetCursorEnterCallback: function(window: PGLFWwindow; callback: GLFWcursorenterfun): GLFWcursorenterfun; cdecl;
  glfwSetScrollCallback: function(window: PGLFWwindow; callback: GLFWscrollfun): GLFWscrollfun; cdecl;
  glfwSetDropCallback: function(window: PGLFWwindow; callback: GLFWdropfun): GLFWdropfun; cdecl;
  glfwJoystickPresent: function(jid: Integer): Integer; cdecl;
  glfwGetJoystickAxes: function(jid: Integer; count: PInteger): PSingle; cdecl;
  glfwGetJoystickButtons: function(jid: Integer; count: PInteger): PByte; cdecl;
  glfwGetJoystickHats: function(jid: Integer; count: PInteger): PByte; cdecl;
  glfwGetJoystickName: function(jid: Integer): PUTF8Char; cdecl;
  glfwGetJoystickGUID: function(jid: Integer): PUTF8Char; cdecl;
  glfwSetJoystickUserPointer: procedure(jid: Integer; pointer: Pointer); cdecl;
  glfwGetJoystickUserPointer: function(jid: Integer): Pointer; cdecl;
  glfwJoystickIsGamepad: function(jid: Integer): Integer; cdecl;
  glfwSetJoystickCallback: function(callback: GLFWjoystickfun): GLFWjoystickfun; cdecl;
  glfwUpdateGamepadMappings: function(const &string: PUTF8Char): Integer; cdecl;
  glfwGetGamepadName: function(jid: Integer): PUTF8Char; cdecl;
  glfwGetGamepadState: function(jid: Integer; state: PGLFWgamepadstate): Integer; cdecl;
  glfwSetClipboardString: procedure(window: PGLFWwindow; const &string: PUTF8Char); cdecl;
  glfwGetClipboardString: function(window: PGLFWwindow): PUTF8Char; cdecl;
  glfwGetTime: function(): Double; cdecl;
  glfwSetTime: procedure(time: Double); cdecl;
  glfwGetTimerValue: function(): UInt64; cdecl;
  glfwGetTimerFrequency: function(): UInt64; cdecl;
  glfwMakeContextCurrent: procedure(window: PGLFWwindow); cdecl;
  glfwGetCurrentContext: function(): PGLFWwindow; cdecl;
  glfwSwapBuffers: procedure(window: PGLFWwindow); cdecl;
  glfwSwapInterval: procedure(interval: Integer); cdecl;
  glfwExtensionSupported: function(const extension: PUTF8Char): Integer; cdecl;
  glfwGetProcAddress: function(const procname: PUTF8Char): GLFWglproc; cdecl;
  glfwVulkanSupported: function(): Integer; cdecl;
  glfwGetRequiredInstanceExtensions: function(count: PUInt32): PPUTF8Char; cdecl;
  alEnable: procedure(capability: ALenum); cdecl;
  alDisable: procedure(capability: ALenum); cdecl;
  alIsEnabled: function(capability: ALenum): ALboolean; cdecl;
  alDopplerFactor: procedure(value: ALfloat); cdecl;
  alDopplerVelocity: procedure(value: ALfloat); cdecl;
  alSpeedOfSound: procedure(value: ALfloat); cdecl;
  alDistanceModel: procedure(distanceModel: ALenum); cdecl;
  alGetString: function(param: ALenum): PALchar; cdecl;
  alGetBooleanv: procedure(param: ALenum; values: PALboolean); cdecl;
  alGetIntegerv: procedure(param: ALenum; values: PALint); cdecl;
  alGetFloatv: procedure(param: ALenum; values: PALfloat); cdecl;
  alGetDoublev: procedure(param: ALenum; values: PALdouble); cdecl;
  alGetBoolean: function(param: ALenum): ALboolean; cdecl;
  alGetInteger: function(param: ALenum): ALint; cdecl;
  alGetFloat: function(param: ALenum): ALfloat; cdecl;
  alGetDouble: function(param: ALenum): ALdouble; cdecl;
  alGetError: function(): ALenum; cdecl;
  alIsExtensionPresent: function(const extname: PALchar): ALboolean; cdecl;
  alGetProcAddress: function(const fname: PALchar): Pointer; cdecl;
  alGetEnumValue: function(const ename: PALchar): ALenum; cdecl;
  alListenerf: procedure(param: ALenum; value: ALfloat); cdecl;
  alListener3f: procedure(param: ALenum; value1: ALfloat; value2: ALfloat; value3: ALfloat); cdecl;
  alListenerfv: procedure(param: ALenum; const values: PALfloat); cdecl;
  alListeneri: procedure(param: ALenum; value: ALint); cdecl;
  alListener3i: procedure(param: ALenum; value1: ALint; value2: ALint; value3: ALint); cdecl;
  alListeneriv: procedure(param: ALenum; const values: PALint); cdecl;
  alGetListenerf: procedure(param: ALenum; value: PALfloat); cdecl;
  alGetListener3f: procedure(param: ALenum; value1: PALfloat; value2: PALfloat; value3: PALfloat); cdecl;
  alGetListenerfv: procedure(param: ALenum; values: PALfloat); cdecl;
  alGetListeneri: procedure(param: ALenum; value: PALint); cdecl;
  alGetListener3i: procedure(param: ALenum; value1: PALint; value2: PALint; value3: PALint); cdecl;
  alGetListeneriv: procedure(param: ALenum; values: PALint); cdecl;
  alGenSources: procedure(n: ALsizei; sources: PALuint); cdecl;
  alDeleteSources: procedure(n: ALsizei; const sources: PALuint); cdecl;
  alIsSource: function(source: ALuint): ALboolean; cdecl;
  alSourcef: procedure(source: ALuint; param: ALenum; value: ALfloat); cdecl;
  alSource3f: procedure(source: ALuint; param: ALenum; value1: ALfloat; value2: ALfloat; value3: ALfloat); cdecl;
  alSourcefv: procedure(source: ALuint; param: ALenum; const values: PALfloat); cdecl;
  alSourcei: procedure(source: ALuint; param: ALenum; value: ALint); cdecl;
  alSource3i: procedure(source: ALuint; param: ALenum; value1: ALint; value2: ALint; value3: ALint); cdecl;
  alSourceiv: procedure(source: ALuint; param: ALenum; const values: PALint); cdecl;
  alGetSourcef: procedure(source: ALuint; param: ALenum; value: PALfloat); cdecl;
  alGetSource3f: procedure(source: ALuint; param: ALenum; value1: PALfloat; value2: PALfloat; value3: PALfloat); cdecl;
  alGetSourcefv: procedure(source: ALuint; param: ALenum; values: PALfloat); cdecl;
  alGetSourcei: procedure(source: ALuint; param: ALenum; value: PALint); cdecl;
  alGetSource3i: procedure(source: ALuint; param: ALenum; value1: PALint; value2: PALint; value3: PALint); cdecl;
  alGetSourceiv: procedure(source: ALuint; param: ALenum; values: PALint); cdecl;
  alSourcePlay: procedure(source: ALuint); cdecl;
  alSourceStop: procedure(source: ALuint); cdecl;
  alSourceRewind: procedure(source: ALuint); cdecl;
  alSourcePause: procedure(source: ALuint); cdecl;
  alSourcePlayv: procedure(n: ALsizei; const sources: PALuint); cdecl;
  alSourceStopv: procedure(n: ALsizei; const sources: PALuint); cdecl;
  alSourceRewindv: procedure(n: ALsizei; const sources: PALuint); cdecl;
  alSourcePausev: procedure(n: ALsizei; const sources: PALuint); cdecl;
  alSourceQueueBuffers: procedure(source: ALuint; nb: ALsizei; const buffers: PALuint); cdecl;
  alSourceUnqueueBuffers: procedure(source: ALuint; nb: ALsizei; buffers: PALuint); cdecl;
  alGenBuffers: procedure(n: ALsizei; buffers: PALuint); cdecl;
  alDeleteBuffers: procedure(n: ALsizei; const buffers: PALuint); cdecl;
  alIsBuffer: function(buffer: ALuint): ALboolean; cdecl;
  alBufferData: procedure(buffer: ALuint; format: ALenum; const data: PALvoid; size: ALsizei; samplerate: ALsizei); cdecl;
  alBufferf: procedure(buffer: ALuint; param: ALenum; value: ALfloat); cdecl;
  alBuffer3f: procedure(buffer: ALuint; param: ALenum; value1: ALfloat; value2: ALfloat; value3: ALfloat); cdecl;
  alBufferfv: procedure(buffer: ALuint; param: ALenum; const values: PALfloat); cdecl;
  alBufferi: procedure(buffer: ALuint; param: ALenum; value: ALint); cdecl;
  alBuffer3i: procedure(buffer: ALuint; param: ALenum; value1: ALint; value2: ALint; value3: ALint); cdecl;
  alBufferiv: procedure(buffer: ALuint; param: ALenum; const values: PALint); cdecl;
  alGetBufferf: procedure(buffer: ALuint; param: ALenum; value: PALfloat); cdecl;
  alGetBuffer3f: procedure(buffer: ALuint; param: ALenum; value1: PALfloat; value2: PALfloat; value3: PALfloat); cdecl;
  alGetBufferfv: procedure(buffer: ALuint; param: ALenum; values: PALfloat); cdecl;
  alGetBufferi: procedure(buffer: ALuint; param: ALenum; value: PALint); cdecl;
  alGetBuffer3i: procedure(buffer: ALuint; param: ALenum; value1: PALint; value2: PALint; value3: PALint); cdecl;
  alGetBufferiv: procedure(buffer: ALuint; param: ALenum; values: PALint); cdecl;
  alcCreateContext: function(device: PALCdevice; const attrlist: PALCint): PALCcontext; cdecl;
  alcMakeContextCurrent: function(context: PALCcontext): ALCboolean; cdecl;
  alcProcessContext: procedure(context: PALCcontext); cdecl;
  alcSuspendContext: procedure(context: PALCcontext); cdecl;
  alcDestroyContext: procedure(context: PALCcontext); cdecl;
  alcGetCurrentContext: function(): PALCcontext; cdecl;
  alcGetContextsDevice: function(context: PALCcontext): PALCdevice; cdecl;
  alcOpenDevice: function(const devicename: PALCchar): PALCdevice; cdecl;
  alcCloseDevice: function(device: PALCdevice): ALCboolean; cdecl;
  alcGetError: function(device: PALCdevice): ALCenum; cdecl;
  alcIsExtensionPresent: function(device: PALCdevice; const extname: PALCchar): ALCboolean; cdecl;
  alcGetProcAddress: function(device: PALCdevice; const funcname: PALCchar): PALCvoid; cdecl;
  alcGetEnumValue: function(device: PALCdevice; const enumname: PALCchar): ALCenum; cdecl;
  alcGetString: function(device: PALCdevice; param: ALCenum): PALCchar; cdecl;
  alcGetIntegerv: procedure(device: PALCdevice; param: ALCenum; size: ALCsizei; values: PALCint); cdecl;
  alcCaptureOpenDevice: function(const devicename: PALCchar; frequency: ALCuint; format: ALCenum; buffersize: ALCsizei): PALCdevice; cdecl;
  alcCaptureCloseDevice: function(device: PALCdevice): ALCboolean; cdecl;
  alcCaptureStart: procedure(device: PALCdevice); cdecl;
  alcCaptureStop: procedure(device: PALCdevice); cdecl;
  alcCaptureSamples: procedure(device: PALCdevice; buffer: PALCvoid; samples: ALCsizei); cdecl;
  ov_clear: function(vf: POggVorbis_File): Integer; cdecl;
  ov_fopen: function(const path: PUTF8Char; vf: POggVorbis_File): Integer; cdecl;
  ov_open_callbacks: function(datasource: Pointer; vf: POggVorbis_File; const initial: PUTF8Char; ibytes: Integer; callbacks: ov_callbacks): Integer; cdecl;
  ov_test_callbacks: function(datasource: Pointer; vf: POggVorbis_File; const initial: PUTF8Char; ibytes: Integer; callbacks: ov_callbacks): Integer; cdecl;
  ov_test_open: function(vf: POggVorbis_File): Integer; cdecl;
  ov_bitrate: function(vf: POggVorbis_File; i: Integer): Integer; cdecl;
  ov_bitrate_instant: function(vf: POggVorbis_File): Integer; cdecl;
  ov_streams: function(vf: POggVorbis_File): Integer; cdecl;
  ov_seekable: function(vf: POggVorbis_File): Integer; cdecl;
  ov_serialnumber: function(vf: POggVorbis_File; i: Integer): Integer; cdecl;
  ov_raw_total: function(vf: POggVorbis_File; i: Integer): ogg_int64_t; cdecl;
  ov_pcm_total: function(vf: POggVorbis_File; i: Integer): ogg_int64_t; cdecl;
  ov_time_total: function(vf: POggVorbis_File; i: Integer): Double; cdecl;
  ov_raw_seek: function(vf: POggVorbis_File; pos: ogg_int64_t): Integer; cdecl;
  ov_pcm_seek: function(vf: POggVorbis_File; pos: ogg_int64_t): Integer; cdecl;
  ov_pcm_seek_page: function(vf: POggVorbis_File; pos: ogg_int64_t): Integer; cdecl;
  ov_time_seek: function(vf: POggVorbis_File; pos: Double): Integer; cdecl;
  ov_time_seek_page: function(vf: POggVorbis_File; pos: Double): Integer; cdecl;
  ov_raw_seek_lap: function(vf: POggVorbis_File; pos: ogg_int64_t): Integer; cdecl;
  ov_pcm_seek_lap: function(vf: POggVorbis_File; pos: ogg_int64_t): Integer; cdecl;
  ov_pcm_seek_page_lap: function(vf: POggVorbis_File; pos: ogg_int64_t): Integer; cdecl;
  ov_time_seek_lap: function(vf: POggVorbis_File; pos: Double): Integer; cdecl;
  ov_time_seek_page_lap: function(vf: POggVorbis_File; pos: Double): Integer; cdecl;
  ov_raw_tell: function(vf: POggVorbis_File): ogg_int64_t; cdecl;
  ov_pcm_tell: function(vf: POggVorbis_File): ogg_int64_t; cdecl;
  ov_time_tell: function(vf: POggVorbis_File): Double; cdecl;
  ov_info: function(vf: POggVorbis_File; link: Integer): Pvorbis_info; cdecl;
  ov_comment: function(vf: POggVorbis_File; link: Integer): Pvorbis_comment; cdecl;
  ov_read_float: function(vf: POggVorbis_File; pcm_channels: PPPSingle; samples: Integer; bitstream: PInteger): Integer; cdecl;
  ov_read_filter: function(vf: POggVorbis_File; buffer: PUTF8Char; length: Integer; bigendianp: Integer; &word: Integer; sgned: Integer; bitstream: PInteger; filter: ov_read_filter_filter; filter_param: Pointer): Integer; cdecl;
  ov_read: function(vf: POggVorbis_File; buffer: PUTF8Char; length: Integer; bigendianp: Integer; &word: Integer; sgned: Integer; bitstream: PInteger): Integer; cdecl;
  ov_crosslap: function(vf1: POggVorbis_File; vf2: POggVorbis_File): Integer; cdecl;
  ov_halfrate: function(vf: POggVorbis_File; flag: Integer): Integer; cdecl;
  ov_halfrate_p: function(vf: POggVorbis_File): Integer; cdecl;
  crc32: function(crc: uLong; const buf: PBytef; len: uInt): uLong; cdecl;
  unzOpen64: function(const path: Pointer): unzFile; cdecl;
  unzLocateFile: function(&file: unzFile; const szFileName: PUTF8Char; iCaseSensitivity: Integer): Integer; cdecl;
  unzClose: function(&file: unzFile): Integer; cdecl;
  unzOpenCurrentFilePassword: function(&file: unzFile; const password: PUTF8Char): Integer; cdecl;
  unzGetCurrentFileInfo64: function(&file: unzFile; pfile_info: Punz_file_info64; szFileName: PUTF8Char; fileNameBufferSize: uLong; extraField: Pointer; extraFieldBufferSize: uLong; szComment: PUTF8Char; commentBufferSize: uLong): Integer; cdecl;
  unzReadCurrentFile: function(&file: unzFile; buf: voidp; len: Cardinal): Integer; cdecl;
  unzCloseCurrentFile: function(&file: unzFile): Integer; cdecl;
  unztell64: function(&file: unzFile): UInt64; cdecl;
  zipOpen64: function(const pathname: Pointer; append: Integer): zipFile; cdecl;
  zipOpenNewFileInZip3_64: function(&file: zipFile; const filename: PUTF8Char; const zipfi: Pzip_fileinfo; const extrafield_local: Pointer; size_extrafield_local: uInt; const extrafield_global: Pointer; size_extrafield_global: uInt; const comment: PUTF8Char; method: Integer; level: Integer; raw: Integer; windowBits: Integer; memLevel: Integer; strategy: Integer; const password: PUTF8Char; crcForCrypting: uLong; zip64: Integer): Integer; cdecl;
  zipWriteInFileInZip: function(&file: zipFile; const buf: Pointer; len: Cardinal): Integer; cdecl;
  zipCloseFileInZip: function(&file: zipFile): Integer; cdecl;
  zipClose: function(&file: zipFile; const global_comment: PUTF8Char): Integer; cdecl;
  c2CircletoCircle: function(A: c2Circle; B: c2Circle): Integer; cdecl;
  c2CircletoAABB: function(A: c2Circle; B: c2AABB): Integer; cdecl;
  c2CircletoCapsule: function(A: c2Circle; B: c2Capsule): Integer; cdecl;
  c2AABBtoAABB: function(A: c2AABB; B: c2AABB): Integer; cdecl;
  c2AABBtoCapsule: function(A: c2AABB; B: c2Capsule): Integer; cdecl;
  c2CapsuletoCapsule: function(A: c2Capsule; B: c2Capsule): Integer; cdecl;
  c2CircletoPoly: function(A: c2Circle; const B: Pc2Poly; const bx: Pc2x): Integer; cdecl;
  c2AABBtoPoly: function(A: c2AABB; const B: Pc2Poly; const bx: Pc2x): Integer; cdecl;
  c2CapsuletoPoly: function(A: c2Capsule; const B: Pc2Poly; const bx: Pc2x): Integer; cdecl;
  c2PolytoPoly: function(const A: Pc2Poly; const ax: Pc2x; const B: Pc2Poly; const bx: Pc2x): Integer; cdecl;
  c2RaytoCircle: function(A: c2Ray; B: c2Circle; &out: Pc2Raycast): Integer; cdecl;
  c2RaytoAABB: function(A: c2Ray; B: c2AABB; &out: Pc2Raycast): Integer; cdecl;
  c2RaytoCapsule: function(A: c2Ray; B: c2Capsule; &out: Pc2Raycast): Integer; cdecl;
  c2RaytoPoly: function(A: c2Ray; const B: Pc2Poly; const bx_ptr: Pc2x; &out: Pc2Raycast): Integer; cdecl;
  c2CircletoCircleManifold: procedure(A: c2Circle; B: c2Circle; m: Pc2Manifold); cdecl;
  c2CircletoAABBManifold: procedure(A: c2Circle; B: c2AABB; m: Pc2Manifold); cdecl;
  c2CircletoCapsuleManifold: procedure(A: c2Circle; B: c2Capsule; m: Pc2Manifold); cdecl;
  c2AABBtoAABBManifold: procedure(A: c2AABB; B: c2AABB; m: Pc2Manifold); cdecl;
  c2AABBtoCapsuleManifold: procedure(A: c2AABB; B: c2Capsule; m: Pc2Manifold); cdecl;
  c2CapsuletoCapsuleManifold: procedure(A: c2Capsule; B: c2Capsule; m: Pc2Manifold); cdecl;
  c2CircletoPolyManifold: procedure(A: c2Circle; const B: Pc2Poly; const bx: Pc2x; m: Pc2Manifold); cdecl;
  c2AABBtoPolyManifold: procedure(A: c2AABB; const B: Pc2Poly; const bx: Pc2x; m: Pc2Manifold); cdecl;
  c2CapsuletoPolyManifold: procedure(A: c2Capsule; const B: Pc2Poly; const bx: Pc2x; m: Pc2Manifold); cdecl;
  c2PolytoPolyManifold: procedure(const A: Pc2Poly; const ax: Pc2x; const B: Pc2Poly; const bx: Pc2x; m: Pc2Manifold); cdecl;
  c2GJK: function(const A: Pointer; typeA: C2_TYPE; const ax_ptr: Pc2x; const B: Pointer; typeB: C2_TYPE; const bx_ptr: Pc2x; outA: Pc2v; outB: Pc2v; use_radius: Integer; iterations: PInteger; cache: Pc2GJKCache): Single; cdecl;
  c2TOI: function(const A: Pointer; typeA: C2_TYPE; const ax_ptr: Pc2x; vA: c2v; const B: Pointer; typeB: C2_TYPE; const bx_ptr: Pc2x; vB: c2v; use_radius: Integer): c2TOIResult; cdecl;
  c2Inflate: procedure(shape: Pointer; &type: C2_TYPE; skin_factor: Single); cdecl;
  c2Hull: function(verts: Pc2v; count: Integer): Integer; cdecl;
  c2Norms: procedure(verts: Pc2v; norms: Pc2v; count: Integer); cdecl;
  c2MakePoly: procedure(p: Pc2Poly); cdecl;
  c2Collided: function(const A: Pointer; const ax: Pc2x; typeA: C2_TYPE; const B: Pointer; const bx: Pc2x; typeB: C2_TYPE): Integer; cdecl;
  c2Collide: procedure(const A: Pointer; const ax: Pc2x; typeA: C2_TYPE; const B: Pointer; const bx: Pc2x; typeB: C2_TYPE; m: Pc2Manifold); cdecl;
  c2CastRay: function(A: c2Ray; const B: Pointer; const bx: Pc2x; typeB: C2_TYPE; &out: Pc2Raycast): Integer; cdecl;
  plm_create_with_filename: function(const filename: PUTF8Char): Pplm_t; cdecl;
  plm_create_with_file: function(fh: PPointer; close_when_done: Integer): Pplm_t; cdecl;
  plm_create_with_memory: function(bytes: PUInt8; length: NativeUInt; free_when_done: Integer): Pplm_t; cdecl;
  plm_create_with_buffer: function(buffer: Pplm_buffer_t; destroy_when_done: Integer): Pplm_t; cdecl;
  plm_destroy: procedure(self: Pplm_t); cdecl;
  plm_has_headers: function(self: Pplm_t): Integer; cdecl;
  plm_get_video_enabled: function(self: Pplm_t): Integer; cdecl;
  plm_set_video_enabled: procedure(self: Pplm_t; enabled: Integer); cdecl;
  plm_get_num_video_streams: function(self: Pplm_t): Integer; cdecl;
  plm_get_width: function(self: Pplm_t): Integer; cdecl;
  plm_get_height: function(self: Pplm_t): Integer; cdecl;
  plm_get_framerate: function(self: Pplm_t): Double; cdecl;
  plm_get_audio_enabled: function(self: Pplm_t): Integer; cdecl;
  plm_set_audio_enabled: procedure(self: Pplm_t; enabled: Integer); cdecl;
  plm_get_num_audio_streams: function(self: Pplm_t): Integer; cdecl;
  plm_set_audio_stream: procedure(self: Pplm_t; stream_index: Integer); cdecl;
  plm_get_samplerate: function(self: Pplm_t): Integer; cdecl;
  plm_get_audio_lead_time: function(self: Pplm_t): Double; cdecl;
  plm_set_audio_lead_time: procedure(self: Pplm_t; lead_time: Double); cdecl;
  plm_get_time: function(self: Pplm_t): Double; cdecl;
  plm_get_duration: function(self: Pplm_t): Double; cdecl;
  plm_rewind: procedure(self: Pplm_t); cdecl;
  plm_get_loop: function(self: Pplm_t): Integer; cdecl;
  plm_set_loop: procedure(self: Pplm_t; loop: Integer); cdecl;
  plm_has_ended: function(self: Pplm_t): Integer; cdecl;
  plm_set_video_decode_callback: procedure(self: Pplm_t; fp: plm_video_decode_callback; user: Pointer); cdecl;
  plm_set_audio_decode_callback: procedure(self: Pplm_t; fp: plm_audio_decode_callback; user: Pointer); cdecl;
  plm_decode: procedure(self: Pplm_t; seconds: Double); cdecl;
  plm_decode_video: function(self: Pplm_t): Pplm_frame_t; cdecl;
  plm_decode_audio: function(self: Pplm_t): Pplm_samples_t; cdecl;
  plm_seek: function(self: Pplm_t; time: Double; seek_exact: Integer): Integer; cdecl;
  plm_seek_frame: function(self: Pplm_t; time: Double; seek_exact: Integer): Pplm_frame_t; cdecl;
  plm_buffer_create_with_filename: function(const filename: PUTF8Char): Pplm_buffer_t; cdecl;
  plm_buffer_create_with_file: function(fh: PPointer; close_when_done: Integer): Pplm_buffer_t; cdecl;
  plm_buffer_create_with_memory: function(bytes: PUInt8; length: NativeUInt; free_when_done: Integer): Pplm_buffer_t; cdecl;
  plm_buffer_create_with_capacity: function(capacity: NativeUInt): Pplm_buffer_t; cdecl;
  plm_buffer_create_for_appending: function(initial_capacity: NativeUInt): Pplm_buffer_t; cdecl;
  plm_buffer_destroy: procedure(self: Pplm_buffer_t); cdecl;
  plm_buffer_write: function(self: Pplm_buffer_t; bytes: PUInt8; length: NativeUInt): NativeUInt; cdecl;
  plm_buffer_signal_end: procedure(self: Pplm_buffer_t); cdecl;
  plm_buffer_set_load_callback: procedure(self: Pplm_buffer_t; fp: plm_buffer_load_callback; user: Pointer); cdecl;
  plm_buffer_rewind: procedure(self: Pplm_buffer_t); cdecl;
  plm_buffer_get_size: function(self: Pplm_buffer_t): NativeUInt; cdecl;
  plm_buffer_get_remaining: function(self: Pplm_buffer_t): NativeUInt; cdecl;
  plm_buffer_has_ended: function(self: Pplm_buffer_t): Integer; cdecl;
  plm_demux_create: function(buffer: Pplm_buffer_t; destroy_when_done: Integer): Pplm_demux_t; cdecl;
  plm_demux_destroy: procedure(self: Pplm_demux_t); cdecl;
  plm_demux_has_headers: function(self: Pplm_demux_t): Integer; cdecl;
  plm_demux_get_num_video_streams: function(self: Pplm_demux_t): Integer; cdecl;
  plm_demux_get_num_audio_streams: function(self: Pplm_demux_t): Integer; cdecl;
  plm_demux_rewind: procedure(self: Pplm_demux_t); cdecl;
  plm_demux_has_ended: function(self: Pplm_demux_t): Integer; cdecl;
  plm_demux_seek: function(self: Pplm_demux_t; time: Double; &type: Integer; force_intra: Integer): Pplm_packet_t; cdecl;
  plm_demux_get_start_time: function(self: Pplm_demux_t; &type: Integer): Double; cdecl;
  plm_demux_get_duration: function(self: Pplm_demux_t; &type: Integer): Double; cdecl;
  plm_demux_decode: function(self: Pplm_demux_t): Pplm_packet_t; cdecl;
  plm_video_create_with_buffer: function(buffer: Pplm_buffer_t; destroy_when_done: Integer): Pplm_video_t; cdecl;
  plm_video_destroy: procedure(self: Pplm_video_t); cdecl;
  plm_video_has_header: function(self: Pplm_video_t): Integer; cdecl;
  plm_video_get_framerate: function(self: Pplm_video_t): Double; cdecl;
  plm_video_get_width: function(self: Pplm_video_t): Integer; cdecl;
  plm_video_get_height: function(self: Pplm_video_t): Integer; cdecl;
  plm_video_set_no_delay: procedure(self: Pplm_video_t; no_delay: Integer); cdecl;
  plm_video_get_time: function(self: Pplm_video_t): Double; cdecl;
  plm_video_set_time: procedure(self: Pplm_video_t; time: Double); cdecl;
  plm_video_rewind: procedure(self: Pplm_video_t); cdecl;
  plm_video_has_ended: function(self: Pplm_video_t): Integer; cdecl;
  plm_video_decode: function(self: Pplm_video_t): Pplm_frame_t; cdecl;
  plm_frame_to_rgb: procedure(frame: Pplm_frame_t; dest: PUInt8; stride: Integer); cdecl;
  plm_frame_to_bgr: procedure(frame: Pplm_frame_t; dest: PUInt8; stride: Integer); cdecl;
  plm_frame_to_rgba: procedure(frame: Pplm_frame_t; dest: PUInt8; stride: Integer); cdecl;
  plm_frame_to_bgra: procedure(frame: Pplm_frame_t; dest: PUInt8; stride: Integer); cdecl;
  plm_frame_to_argb: procedure(frame: Pplm_frame_t; dest: PUInt8; stride: Integer); cdecl;
  plm_frame_to_abgr: procedure(frame: Pplm_frame_t; dest: PUInt8; stride: Integer); cdecl;
  plm_audio_create_with_buffer: function(buffer: Pplm_buffer_t; destroy_when_done: Integer): Pplm_audio_t; cdecl;
  plm_audio_destroy: procedure(self: Pplm_audio_t); cdecl;
  plm_audio_has_header: function(self: Pplm_audio_t): Integer; cdecl;
  plm_audio_get_samplerate: function(self: Pplm_audio_t): Integer; cdecl;
  plm_audio_get_time: function(self: Pplm_audio_t): Double; cdecl;
  plm_audio_set_time: procedure(self: Pplm_audio_t; time: Double); cdecl;
  plm_audio_rewind: procedure(self: Pplm_audio_t); cdecl;
  plm_audio_has_ended: function(self: Pplm_audio_t): Integer; cdecl;
  plm_audio_decode: function(self: Pplm_audio_t): Pplm_samples_t; cdecl;
  stbi_load_from_memory: function(const buffer: Pstbi_uc; len: Integer; x: PInteger; y: PInteger; channels_in_file: PInteger; desired_channels: Integer): Pstbi_uc; cdecl;
  stbi_load_from_callbacks: function(const clbk: Pstbi_io_callbacks; user: Pointer; x: PInteger; y: PInteger; channels_in_file: PInteger; desired_channels: Integer): Pstbi_uc; cdecl;
  stbi_load: function(const filename: PUTF8Char; x: PInteger; y: PInteger; channels_in_file: PInteger; desired_channels: Integer): Pstbi_uc; cdecl;
  stbi_load_from_file: function(f: PPointer; x: PInteger; y: PInteger; channels_in_file: PInteger; desired_channels: Integer): Pstbi_uc; cdecl;
  stbi_load_gif_from_memory: function(const buffer: Pstbi_uc; len: Integer; delays: PPInteger; x: PInteger; y: PInteger; z: PInteger; comp: PInteger; req_comp: Integer): Pstbi_uc; cdecl;
  stbi_load_16_from_memory: function(const buffer: Pstbi_uc; len: Integer; x: PInteger; y: PInteger; channels_in_file: PInteger; desired_channels: Integer): Pstbi_us; cdecl;
  stbi_load_16_from_callbacks: function(const clbk: Pstbi_io_callbacks; user: Pointer; x: PInteger; y: PInteger; channels_in_file: PInteger; desired_channels: Integer): Pstbi_us; cdecl;
  stbi_load_16: function(const filename: PUTF8Char; x: PInteger; y: PInteger; channels_in_file: PInteger; desired_channels: Integer): Pstbi_us; cdecl;
  stbi_load_from_file_16: function(f: PPointer; x: PInteger; y: PInteger; channels_in_file: PInteger; desired_channels: Integer): Pstbi_us; cdecl;
  stbi_loadf_from_memory: function(const buffer: Pstbi_uc; len: Integer; x: PInteger; y: PInteger; channels_in_file: PInteger; desired_channels: Integer): PSingle; cdecl;
  stbi_loadf_from_callbacks: function(const clbk: Pstbi_io_callbacks; user: Pointer; x: PInteger; y: PInteger; channels_in_file: PInteger; desired_channels: Integer): PSingle; cdecl;
  stbi_loadf: function(const filename: PUTF8Char; x: PInteger; y: PInteger; channels_in_file: PInteger; desired_channels: Integer): PSingle; cdecl;
  stbi_loadf_from_file: function(f: PPointer; x: PInteger; y: PInteger; channels_in_file: PInteger; desired_channels: Integer): PSingle; cdecl;
  stbi_hdr_to_ldr_gamma: procedure(gamma: Single); cdecl;
  stbi_hdr_to_ldr_scale: procedure(scale: Single); cdecl;
  stbi_ldr_to_hdr_gamma: procedure(gamma: Single); cdecl;
  stbi_ldr_to_hdr_scale: procedure(scale: Single); cdecl;
  stbi_is_hdr_from_callbacks: function(const clbk: Pstbi_io_callbacks; user: Pointer): Integer; cdecl;
  stbi_is_hdr_from_memory: function(const buffer: Pstbi_uc; len: Integer): Integer; cdecl;
  stbi_is_hdr: function(const filename: PUTF8Char): Integer; cdecl;
  stbi_is_hdr_from_file: function(f: PPointer): Integer; cdecl;
  stbi_failure_reason: function(): PUTF8Char; cdecl;
  stbi_image_free: procedure(retval_from_stbi_load: Pointer); cdecl;
  stbi_info_from_memory: function(const buffer: Pstbi_uc; len: Integer; x: PInteger; y: PInteger; comp: PInteger): Integer; cdecl;
  stbi_info_from_callbacks: function(const clbk: Pstbi_io_callbacks; user: Pointer; x: PInteger; y: PInteger; comp: PInteger): Integer; cdecl;
  stbi_is_16_bit_from_memory: function(const buffer: Pstbi_uc; len: Integer): Integer; cdecl;
  stbi_is_16_bit_from_callbacks: function(const clbk: Pstbi_io_callbacks; user: Pointer): Integer; cdecl;
  stbi_info: function(const filename: PUTF8Char; x: PInteger; y: PInteger; comp: PInteger): Integer; cdecl;
  stbi_info_from_file: function(f: PPointer; x: PInteger; y: PInteger; comp: PInteger): Integer; cdecl;
  stbi_is_16_bit: function(const filename: PUTF8Char): Integer; cdecl;
  stbi_is_16_bit_from_file: function(f: PPointer): Integer; cdecl;
  stbi_set_unpremultiply_on_load: procedure(flag_true_if_should_unpremultiply: Integer); cdecl;
  stbi_convert_iphone_png_to_rgb: procedure(flag_true_if_should_convert: Integer); cdecl;
  stbi_set_flip_vertically_on_load: procedure(flag_true_if_should_flip: Integer); cdecl;
  stbi_set_unpremultiply_on_load_thread: procedure(flag_true_if_should_unpremultiply: Integer); cdecl;
  stbi_convert_iphone_png_to_rgb_thread: procedure(flag_true_if_should_convert: Integer); cdecl;
  stbi_set_flip_vertically_on_load_thread: procedure(flag_true_if_should_flip: Integer); cdecl;
  stbi_zlib_decode_malloc_guesssize: function(const buffer: PUTF8Char; len: Integer; initial_size: Integer; outlen: PInteger): PUTF8Char; cdecl;
  stbi_zlib_decode_malloc_guesssize_headerflag: function(const buffer: PUTF8Char; len: Integer; initial_size: Integer; outlen: PInteger; parse_header: Integer): PUTF8Char; cdecl;
  stbi_zlib_decode_malloc: function(const buffer: PUTF8Char; len: Integer; outlen: PInteger): PUTF8Char; cdecl;
  stbi_zlib_decode_buffer: function(obuffer: PUTF8Char; olen: Integer; const ibuffer: PUTF8Char; ilen: Integer): Integer; cdecl;
  stbi_zlib_decode_noheader_malloc: function(const buffer: PUTF8Char; len: Integer; outlen: PInteger): PUTF8Char; cdecl;
  stbi_zlib_decode_noheader_buffer: function(obuffer: PUTF8Char; olen: Integer; const ibuffer: PUTF8Char; ilen: Integer): Integer; cdecl;
  stbi_write_png: function(const filename: PUTF8Char; w: Integer; h: Integer; comp: Integer; const data: Pointer; stride_in_bytes: Integer): Integer; cdecl;
  stbi_write_bmp: function(const filename: PUTF8Char; w: Integer; h: Integer; comp: Integer; const data: Pointer): Integer; cdecl;
  stbi_write_tga: function(const filename: PUTF8Char; w: Integer; h: Integer; comp: Integer; const data: Pointer): Integer; cdecl;
  stbi_write_hdr: function(const filename: PUTF8Char; w: Integer; h: Integer; comp: Integer; const data: PSingle): Integer; cdecl;
  stbi_write_jpg: function(const filename: PUTF8Char; x: Integer; y: Integer; comp: Integer; const data: Pointer; quality: Integer): Integer; cdecl;
  stbi_write_png_to_func: function(func: Pstbi_write_func; context: Pointer; w: Integer; h: Integer; comp: Integer; const data: Pointer; stride_in_bytes: Integer): Integer; cdecl;
  stbi_write_bmp_to_func: function(func: Pstbi_write_func; context: Pointer; w: Integer; h: Integer; comp: Integer; const data: Pointer): Integer; cdecl;
  stbi_write_tga_to_func: function(func: Pstbi_write_func; context: Pointer; w: Integer; h: Integer; comp: Integer; const data: Pointer): Integer; cdecl;
  stbi_write_hdr_to_func: function(func: Pstbi_write_func; context: Pointer; w: Integer; h: Integer; comp: Integer; const data: PSingle): Integer; cdecl;
  stbi_write_jpg_to_func: function(func: Pstbi_write_func; context: Pointer; x: Integer; y: Integer; comp: Integer; const data: Pointer; quality: Integer): Integer; cdecl;
  stbi_flip_vertically_on_write: procedure(flip_boolean: Integer); cdecl;
  stbtt_BakeFontBitmap: function(const data: PByte; offset: Integer; pixel_height: Single; pixels: PByte; pw: Integer; ph: Integer; first_char: Integer; num_chars: Integer; chardata: Pstbtt_bakedchar): Integer; cdecl;
  stbtt_GetBakedQuad: procedure(const chardata: Pstbtt_bakedchar; pw: Integer; ph: Integer; char_index: Integer; xpos: PSingle; ypos: PSingle; q: Pstbtt_aligned_quad; opengl_fillrule: Integer); cdecl;
  stbtt_GetScaledFontVMetrics: procedure(const fontdata: PByte; index: Integer; size: Single; ascent: PSingle; descent: PSingle; lineGap: PSingle); cdecl;
  stbtt_PackBegin: function(spc: Pstbtt_pack_context; pixels: PByte; width: Integer; height: Integer; stride_in_bytes: Integer; padding: Integer; alloc_context: Pointer): Integer; cdecl;
  stbtt_PackEnd: procedure(spc: Pstbtt_pack_context); cdecl;
  stbtt_PackFontRange: function(spc: Pstbtt_pack_context; const fontdata: PByte; font_index: Integer; font_size: Single; first_unicode_char_in_range: Integer; num_chars_in_range: Integer; chardata_for_range: Pstbtt_packedchar): Integer; cdecl;
  stbtt_PackFontRanges: function(spc: Pstbtt_pack_context; const fontdata: PByte; font_index: Integer; ranges: Pstbtt_pack_range; num_ranges: Integer): Integer; cdecl;
  stbtt_PackSetOversampling: procedure(spc: Pstbtt_pack_context; h_oversample: Cardinal; v_oversample: Cardinal); cdecl;
  stbtt_PackSetSkipMissingCodepoints: procedure(spc: Pstbtt_pack_context; skip: Integer); cdecl;
  stbtt_GetPackedQuad: procedure(const chardata: Pstbtt_packedchar; pw: Integer; ph: Integer; char_index: Integer; xpos: PSingle; ypos: PSingle; q: Pstbtt_aligned_quad; align_to_integer: Integer); cdecl;
  stbtt_PackFontRangesGatherRects: function(spc: Pstbtt_pack_context; const info: Pstbtt_fontinfo; ranges: Pstbtt_pack_range; num_ranges: Integer; rects: Pstbrp_rect): Integer; cdecl;
  stbtt_PackFontRangesPackRects: procedure(spc: Pstbtt_pack_context; rects: Pstbrp_rect; num_rects: Integer); cdecl;
  stbtt_PackFontRangesRenderIntoRects: function(spc: Pstbtt_pack_context; const info: Pstbtt_fontinfo; ranges: Pstbtt_pack_range; num_ranges: Integer; rects: Pstbrp_rect): Integer; cdecl;
  stbtt_GetNumberOfFonts: function(const data: PByte): Integer; cdecl;
  stbtt_GetFontOffsetForIndex: function(const data: PByte; index: Integer): Integer; cdecl;
  stbtt_InitFont: function(info: Pstbtt_fontinfo; const data: PByte; offset: Integer): Integer; cdecl;
  stbtt_FindGlyphIndex: function(const info: Pstbtt_fontinfo; unicode_codepoint: Integer): Integer; cdecl;
  stbtt_ScaleForPixelHeight: function(const info: Pstbtt_fontinfo; pixels: Single): Single; cdecl;
  stbtt_ScaleForMappingEmToPixels: function(const info: Pstbtt_fontinfo; pixels: Single): Single; cdecl;
  stbtt_GetFontVMetrics: procedure(const info: Pstbtt_fontinfo; ascent: PInteger; descent: PInteger; lineGap: PInteger); cdecl;
  stbtt_GetFontVMetricsOS2: function(const info: Pstbtt_fontinfo; typoAscent: PInteger; typoDescent: PInteger; typoLineGap: PInteger): Integer; cdecl;
  stbtt_GetFontBoundingBox: procedure(const info: Pstbtt_fontinfo; x0: PInteger; y0: PInteger; x1: PInteger; y1: PInteger); cdecl;
  stbtt_GetCodepointHMetrics: procedure(const info: Pstbtt_fontinfo; codepoint: Integer; advanceWidth: PInteger; leftSideBearing: PInteger); cdecl;
  stbtt_GetCodepointKernAdvance: function(const info: Pstbtt_fontinfo; ch1: Integer; ch2: Integer): Integer; cdecl;
  stbtt_GetCodepointBox: function(const info: Pstbtt_fontinfo; codepoint: Integer; x0: PInteger; y0: PInteger; x1: PInteger; y1: PInteger): Integer; cdecl;
  stbtt_GetGlyphHMetrics: procedure(const info: Pstbtt_fontinfo; glyph_index: Integer; advanceWidth: PInteger; leftSideBearing: PInteger); cdecl;
  stbtt_GetGlyphKernAdvance: function(const info: Pstbtt_fontinfo; glyph1: Integer; glyph2: Integer): Integer; cdecl;
  stbtt_GetGlyphBox: function(const info: Pstbtt_fontinfo; glyph_index: Integer; x0: PInteger; y0: PInteger; x1: PInteger; y1: PInteger): Integer; cdecl;
  stbtt_GetKerningTableLength: function(const info: Pstbtt_fontinfo): Integer; cdecl;
  stbtt_GetKerningTable: function(const info: Pstbtt_fontinfo; table: Pstbtt_kerningentry; table_length: Integer): Integer; cdecl;
  stbtt_IsGlyphEmpty: function(const info: Pstbtt_fontinfo; glyph_index: Integer): Integer; cdecl;
  stbtt_GetCodepointShape: function(const info: Pstbtt_fontinfo; unicode_codepoint: Integer; vertices: PPstbtt_vertex): Integer; cdecl;
  stbtt_GetGlyphShape: function(const info: Pstbtt_fontinfo; glyph_index: Integer; vertices: PPstbtt_vertex): Integer; cdecl;
  stbtt_FreeShape: procedure(const info: Pstbtt_fontinfo; vertices: Pstbtt_vertex); cdecl;
  stbtt_FindSVGDoc: function(const info: Pstbtt_fontinfo; gl: Integer): PByte; cdecl;
  stbtt_GetCodepointSVG: function(const info: Pstbtt_fontinfo; unicode_codepoint: Integer; svg: PPUTF8Char): Integer; cdecl;
  stbtt_GetGlyphSVG: function(const info: Pstbtt_fontinfo; gl: Integer; svg: PPUTF8Char): Integer; cdecl;
  stbtt_FreeBitmap: procedure(bitmap: PByte; userdata: Pointer); cdecl;
  stbtt_GetCodepointBitmap: function(const info: Pstbtt_fontinfo; scale_x: Single; scale_y: Single; codepoint: Integer; width: PInteger; height: PInteger; xoff: PInteger; yoff: PInteger): PByte; cdecl;
  stbtt_GetCodepointBitmapSubpixel: function(const info: Pstbtt_fontinfo; scale_x: Single; scale_y: Single; shift_x: Single; shift_y: Single; codepoint: Integer; width: PInteger; height: PInteger; xoff: PInteger; yoff: PInteger): PByte; cdecl;
  stbtt_MakeCodepointBitmap: procedure(const info: Pstbtt_fontinfo; output: PByte; out_w: Integer; out_h: Integer; out_stride: Integer; scale_x: Single; scale_y: Single; codepoint: Integer); cdecl;
  stbtt_MakeCodepointBitmapSubpixel: procedure(const info: Pstbtt_fontinfo; output: PByte; out_w: Integer; out_h: Integer; out_stride: Integer; scale_x: Single; scale_y: Single; shift_x: Single; shift_y: Single; codepoint: Integer); cdecl;
  stbtt_MakeCodepointBitmapSubpixelPrefilter: procedure(const info: Pstbtt_fontinfo; output: PByte; out_w: Integer; out_h: Integer; out_stride: Integer; scale_x: Single; scale_y: Single; shift_x: Single; shift_y: Single; oversample_x: Integer; oversample_y: Integer; sub_x: PSingle; sub_y: PSingle; codepoint: Integer); cdecl;
  stbtt_GetCodepointBitmapBox: procedure(const font: Pstbtt_fontinfo; codepoint: Integer; scale_x: Single; scale_y: Single; ix0: PInteger; iy0: PInteger; ix1: PInteger; iy1: PInteger); cdecl;
  stbtt_GetCodepointBitmapBoxSubpixel: procedure(const font: Pstbtt_fontinfo; codepoint: Integer; scale_x: Single; scale_y: Single; shift_x: Single; shift_y: Single; ix0: PInteger; iy0: PInteger; ix1: PInteger; iy1: PInteger); cdecl;
  stbtt_GetGlyphBitmap: function(const info: Pstbtt_fontinfo; scale_x: Single; scale_y: Single; glyph: Integer; width: PInteger; height: PInteger; xoff: PInteger; yoff: PInteger): PByte; cdecl;
  stbtt_GetGlyphBitmapSubpixel: function(const info: Pstbtt_fontinfo; scale_x: Single; scale_y: Single; shift_x: Single; shift_y: Single; glyph: Integer; width: PInteger; height: PInteger; xoff: PInteger; yoff: PInteger): PByte; cdecl;
  stbtt_MakeGlyphBitmap: procedure(const info: Pstbtt_fontinfo; output: PByte; out_w: Integer; out_h: Integer; out_stride: Integer; scale_x: Single; scale_y: Single; glyph: Integer); cdecl;
  stbtt_MakeGlyphBitmapSubpixel: procedure(const info: Pstbtt_fontinfo; output: PByte; out_w: Integer; out_h: Integer; out_stride: Integer; scale_x: Single; scale_y: Single; shift_x: Single; shift_y: Single; glyph: Integer); cdecl;
  stbtt_MakeGlyphBitmapSubpixelPrefilter: procedure(const info: Pstbtt_fontinfo; output: PByte; out_w: Integer; out_h: Integer; out_stride: Integer; scale_x: Single; scale_y: Single; shift_x: Single; shift_y: Single; oversample_x: Integer; oversample_y: Integer; sub_x: PSingle; sub_y: PSingle; glyph: Integer); cdecl;
  stbtt_GetGlyphBitmapBox: procedure(const font: Pstbtt_fontinfo; glyph: Integer; scale_x: Single; scale_y: Single; ix0: PInteger; iy0: PInteger; ix1: PInteger; iy1: PInteger); cdecl;
  stbtt_GetGlyphBitmapBoxSubpixel: procedure(const font: Pstbtt_fontinfo; glyph: Integer; scale_x: Single; scale_y: Single; shift_x: Single; shift_y: Single; ix0: PInteger; iy0: PInteger; ix1: PInteger; iy1: PInteger); cdecl;
  stbtt_Rasterize: procedure(result: Pstbtt__bitmap; flatness_in_pixels: Single; vertices: Pstbtt_vertex; num_verts: Integer; scale_x: Single; scale_y: Single; shift_x: Single; shift_y: Single; x_off: Integer; y_off: Integer; invert: Integer; userdata: Pointer); cdecl;
  stbtt_FreeSDF: procedure(bitmap: PByte; userdata: Pointer); cdecl;
  stbtt_GetGlyphSDF: function(const info: Pstbtt_fontinfo; scale: Single; glyph: Integer; padding: Integer; onedge_value: Byte; pixel_dist_scale: Single; width: PInteger; height: PInteger; xoff: PInteger; yoff: PInteger): PByte; cdecl;
  stbtt_GetCodepointSDF: function(const info: Pstbtt_fontinfo; scale: Single; codepoint: Integer; padding: Integer; onedge_value: Byte; pixel_dist_scale: Single; width: PInteger; height: PInteger; xoff: PInteger; yoff: PInteger): PByte; cdecl;
  stbtt_FindMatchingFont: function(const fontdata: PByte; const name: PUTF8Char; flags: Integer): Integer; cdecl;
  stbtt_CompareUTF8toUTF16_bigendian: function(const s1: PUTF8Char; len1: Integer; const s2: PUTF8Char; len2: Integer): Integer; cdecl;
  stbtt_GetFontNameString: function(const font: Pstbtt_fontinfo; length: PInteger; platformID: Integer; encodingID: Integer; languageID: Integer; nameID: Integer): PUTF8Char; cdecl;

procedure GetExports(const aDLLHandle: THandle);

implementation

procedure GetExports(const aDLLHandle: THandle);
begin
  if aDllHandle = 0 then Exit;
  alBuffer3f := GetProcAddress(aDLLHandle, 'alBuffer3f');
  alBuffer3i := GetProcAddress(aDLLHandle, 'alBuffer3i');
  alBufferData := GetProcAddress(aDLLHandle, 'alBufferData');
  alBufferf := GetProcAddress(aDLLHandle, 'alBufferf');
  alBufferfv := GetProcAddress(aDLLHandle, 'alBufferfv');
  alBufferi := GetProcAddress(aDLLHandle, 'alBufferi');
  alBufferiv := GetProcAddress(aDLLHandle, 'alBufferiv');
  alcCaptureCloseDevice := GetProcAddress(aDLLHandle, 'alcCaptureCloseDevice');
  alcCaptureOpenDevice := GetProcAddress(aDLLHandle, 'alcCaptureOpenDevice');
  alcCaptureSamples := GetProcAddress(aDLLHandle, 'alcCaptureSamples');
  alcCaptureStart := GetProcAddress(aDLLHandle, 'alcCaptureStart');
  alcCaptureStop := GetProcAddress(aDLLHandle, 'alcCaptureStop');
  alcCloseDevice := GetProcAddress(aDLLHandle, 'alcCloseDevice');
  alcCreateContext := GetProcAddress(aDLLHandle, 'alcCreateContext');
  alcDestroyContext := GetProcAddress(aDLLHandle, 'alcDestroyContext');
  alcGetContextsDevice := GetProcAddress(aDLLHandle, 'alcGetContextsDevice');
  alcGetCurrentContext := GetProcAddress(aDLLHandle, 'alcGetCurrentContext');
  alcGetEnumValue := GetProcAddress(aDLLHandle, 'alcGetEnumValue');
  alcGetError := GetProcAddress(aDLLHandle, 'alcGetError');
  alcGetIntegerv := GetProcAddress(aDLLHandle, 'alcGetIntegerv');
  alcGetProcAddress := GetProcAddress(aDLLHandle, 'alcGetProcAddress');
  alcGetString := GetProcAddress(aDLLHandle, 'alcGetString');
  alcIsExtensionPresent := GetProcAddress(aDLLHandle, 'alcIsExtensionPresent');
  alcMakeContextCurrent := GetProcAddress(aDLLHandle, 'alcMakeContextCurrent');
  alcOpenDevice := GetProcAddress(aDLLHandle, 'alcOpenDevice');
  alcProcessContext := GetProcAddress(aDLLHandle, 'alcProcessContext');
  alcSuspendContext := GetProcAddress(aDLLHandle, 'alcSuspendContext');
  alDeleteBuffers := GetProcAddress(aDLLHandle, 'alDeleteBuffers');
  alDeleteSources := GetProcAddress(aDLLHandle, 'alDeleteSources');
  alDisable := GetProcAddress(aDLLHandle, 'alDisable');
  alDistanceModel := GetProcAddress(aDLLHandle, 'alDistanceModel');
  alDopplerFactor := GetProcAddress(aDLLHandle, 'alDopplerFactor');
  alDopplerVelocity := GetProcAddress(aDLLHandle, 'alDopplerVelocity');
  alEnable := GetProcAddress(aDLLHandle, 'alEnable');
  alGenBuffers := GetProcAddress(aDLLHandle, 'alGenBuffers');
  alGenSources := GetProcAddress(aDLLHandle, 'alGenSources');
  alGetBoolean := GetProcAddress(aDLLHandle, 'alGetBoolean');
  alGetBooleanv := GetProcAddress(aDLLHandle, 'alGetBooleanv');
  alGetBuffer3f := GetProcAddress(aDLLHandle, 'alGetBuffer3f');
  alGetBuffer3i := GetProcAddress(aDLLHandle, 'alGetBuffer3i');
  alGetBufferf := GetProcAddress(aDLLHandle, 'alGetBufferf');
  alGetBufferfv := GetProcAddress(aDLLHandle, 'alGetBufferfv');
  alGetBufferi := GetProcAddress(aDLLHandle, 'alGetBufferi');
  alGetBufferiv := GetProcAddress(aDLLHandle, 'alGetBufferiv');
  alGetDouble := GetProcAddress(aDLLHandle, 'alGetDouble');
  alGetDoublev := GetProcAddress(aDLLHandle, 'alGetDoublev');
  alGetEnumValue := GetProcAddress(aDLLHandle, 'alGetEnumValue');
  alGetError := GetProcAddress(aDLLHandle, 'alGetError');
  alGetFloat := GetProcAddress(aDLLHandle, 'alGetFloat');
  alGetFloatv := GetProcAddress(aDLLHandle, 'alGetFloatv');
  alGetInteger := GetProcAddress(aDLLHandle, 'alGetInteger');
  alGetIntegerv := GetProcAddress(aDLLHandle, 'alGetIntegerv');
  alGetListener3f := GetProcAddress(aDLLHandle, 'alGetListener3f');
  alGetListener3i := GetProcAddress(aDLLHandle, 'alGetListener3i');
  alGetListenerf := GetProcAddress(aDLLHandle, 'alGetListenerf');
  alGetListenerfv := GetProcAddress(aDLLHandle, 'alGetListenerfv');
  alGetListeneri := GetProcAddress(aDLLHandle, 'alGetListeneri');
  alGetListeneriv := GetProcAddress(aDLLHandle, 'alGetListeneriv');
  alGetProcAddress := GetProcAddress(aDLLHandle, 'alGetProcAddress');
  alGetSource3f := GetProcAddress(aDLLHandle, 'alGetSource3f');
  alGetSource3i := GetProcAddress(aDLLHandle, 'alGetSource3i');
  alGetSourcef := GetProcAddress(aDLLHandle, 'alGetSourcef');
  alGetSourcefv := GetProcAddress(aDLLHandle, 'alGetSourcefv');
  alGetSourcei := GetProcAddress(aDLLHandle, 'alGetSourcei');
  alGetSourceiv := GetProcAddress(aDLLHandle, 'alGetSourceiv');
  alGetString := GetProcAddress(aDLLHandle, 'alGetString');
  alIsBuffer := GetProcAddress(aDLLHandle, 'alIsBuffer');
  alIsEnabled := GetProcAddress(aDLLHandle, 'alIsEnabled');
  alIsExtensionPresent := GetProcAddress(aDLLHandle, 'alIsExtensionPresent');
  alIsSource := GetProcAddress(aDLLHandle, 'alIsSource');
  alListener3f := GetProcAddress(aDLLHandle, 'alListener3f');
  alListener3i := GetProcAddress(aDLLHandle, 'alListener3i');
  alListenerf := GetProcAddress(aDLLHandle, 'alListenerf');
  alListenerfv := GetProcAddress(aDLLHandle, 'alListenerfv');
  alListeneri := GetProcAddress(aDLLHandle, 'alListeneri');
  alListeneriv := GetProcAddress(aDLLHandle, 'alListeneriv');
  alSource3f := GetProcAddress(aDLLHandle, 'alSource3f');
  alSource3i := GetProcAddress(aDLLHandle, 'alSource3i');
  alSourcef := GetProcAddress(aDLLHandle, 'alSourcef');
  alSourcefv := GetProcAddress(aDLLHandle, 'alSourcefv');
  alSourcei := GetProcAddress(aDLLHandle, 'alSourcei');
  alSourceiv := GetProcAddress(aDLLHandle, 'alSourceiv');
  alSourcePause := GetProcAddress(aDLLHandle, 'alSourcePause');
  alSourcePausev := GetProcAddress(aDLLHandle, 'alSourcePausev');
  alSourcePlay := GetProcAddress(aDLLHandle, 'alSourcePlay');
  alSourcePlayv := GetProcAddress(aDLLHandle, 'alSourcePlayv');
  alSourceQueueBuffers := GetProcAddress(aDLLHandle, 'alSourceQueueBuffers');
  alSourceRewind := GetProcAddress(aDLLHandle, 'alSourceRewind');
  alSourceRewindv := GetProcAddress(aDLLHandle, 'alSourceRewindv');
  alSourceStop := GetProcAddress(aDLLHandle, 'alSourceStop');
  alSourceStopv := GetProcAddress(aDLLHandle, 'alSourceStopv');
  alSourceUnqueueBuffers := GetProcAddress(aDLLHandle, 'alSourceUnqueueBuffers');
  alSpeedOfSound := GetProcAddress(aDLLHandle, 'alSpeedOfSound');
  c2AABBtoAABB := GetProcAddress(aDLLHandle, 'c2AABBtoAABB');
  c2AABBtoAABBManifold := GetProcAddress(aDLLHandle, 'c2AABBtoAABBManifold');
  c2AABBtoCapsule := GetProcAddress(aDLLHandle, 'c2AABBtoCapsule');
  c2AABBtoCapsuleManifold := GetProcAddress(aDLLHandle, 'c2AABBtoCapsuleManifold');
  c2AABBtoPoly := GetProcAddress(aDLLHandle, 'c2AABBtoPoly');
  c2AABBtoPolyManifold := GetProcAddress(aDLLHandle, 'c2AABBtoPolyManifold');
  c2CapsuletoCapsule := GetProcAddress(aDLLHandle, 'c2CapsuletoCapsule');
  c2CapsuletoCapsuleManifold := GetProcAddress(aDLLHandle, 'c2CapsuletoCapsuleManifold');
  c2CapsuletoPoly := GetProcAddress(aDLLHandle, 'c2CapsuletoPoly');
  c2CapsuletoPolyManifold := GetProcAddress(aDLLHandle, 'c2CapsuletoPolyManifold');
  c2CastRay := GetProcAddress(aDLLHandle, 'c2CastRay');
  c2CircletoAABB := GetProcAddress(aDLLHandle, 'c2CircletoAABB');
  c2CircletoAABBManifold := GetProcAddress(aDLLHandle, 'c2CircletoAABBManifold');
  c2CircletoCapsule := GetProcAddress(aDLLHandle, 'c2CircletoCapsule');
  c2CircletoCapsuleManifold := GetProcAddress(aDLLHandle, 'c2CircletoCapsuleManifold');
  c2CircletoCircle := GetProcAddress(aDLLHandle, 'c2CircletoCircle');
  c2CircletoCircleManifold := GetProcAddress(aDLLHandle, 'c2CircletoCircleManifold');
  c2CircletoPoly := GetProcAddress(aDLLHandle, 'c2CircletoPoly');
  c2CircletoPolyManifold := GetProcAddress(aDLLHandle, 'c2CircletoPolyManifold');
  c2Collide := GetProcAddress(aDLLHandle, 'c2Collide');
  c2Collided := GetProcAddress(aDLLHandle, 'c2Collided');
  c2GJK := GetProcAddress(aDLLHandle, 'c2GJK');
  c2Hull := GetProcAddress(aDLLHandle, 'c2Hull');
  c2Inflate := GetProcAddress(aDLLHandle, 'c2Inflate');
  c2MakePoly := GetProcAddress(aDLLHandle, 'c2MakePoly');
  c2Norms := GetProcAddress(aDLLHandle, 'c2Norms');
  c2PolytoPoly := GetProcAddress(aDLLHandle, 'c2PolytoPoly');
  c2PolytoPolyManifold := GetProcAddress(aDLLHandle, 'c2PolytoPolyManifold');
  c2RaytoAABB := GetProcAddress(aDLLHandle, 'c2RaytoAABB');
  c2RaytoCapsule := GetProcAddress(aDLLHandle, 'c2RaytoCapsule');
  c2RaytoCircle := GetProcAddress(aDLLHandle, 'c2RaytoCircle');
  c2RaytoPoly := GetProcAddress(aDLLHandle, 'c2RaytoPoly');
  c2TOI := GetProcAddress(aDLLHandle, 'c2TOI');
  crc32 := GetProcAddress(aDLLHandle, 'crc32');
  glfwCreateCursor := GetProcAddress(aDLLHandle, 'glfwCreateCursor');
  glfwCreateStandardCursor := GetProcAddress(aDLLHandle, 'glfwCreateStandardCursor');
  glfwCreateWindow := GetProcAddress(aDLLHandle, 'glfwCreateWindow');
  glfwDefaultWindowHints := GetProcAddress(aDLLHandle, 'glfwDefaultWindowHints');
  glfwDestroyCursor := GetProcAddress(aDLLHandle, 'glfwDestroyCursor');
  glfwDestroyWindow := GetProcAddress(aDLLHandle, 'glfwDestroyWindow');
  glfwExtensionSupported := GetProcAddress(aDLLHandle, 'glfwExtensionSupported');
  glfwFocusWindow := GetProcAddress(aDLLHandle, 'glfwFocusWindow');
  glfwGetClipboardString := GetProcAddress(aDLLHandle, 'glfwGetClipboardString');
  glfwGetCurrentContext := GetProcAddress(aDLLHandle, 'glfwGetCurrentContext');
  glfwGetCursorPos := GetProcAddress(aDLLHandle, 'glfwGetCursorPos');
  glfwGetError := GetProcAddress(aDLLHandle, 'glfwGetError');
  glfwGetFramebufferSize := GetProcAddress(aDLLHandle, 'glfwGetFramebufferSize');
  glfwGetGamepadName := GetProcAddress(aDLLHandle, 'glfwGetGamepadName');
  glfwGetGamepadState := GetProcAddress(aDLLHandle, 'glfwGetGamepadState');
  glfwGetGammaRamp := GetProcAddress(aDLLHandle, 'glfwGetGammaRamp');
  glfwGetInputMode := GetProcAddress(aDLLHandle, 'glfwGetInputMode');
  glfwGetJoystickAxes := GetProcAddress(aDLLHandle, 'glfwGetJoystickAxes');
  glfwGetJoystickButtons := GetProcAddress(aDLLHandle, 'glfwGetJoystickButtons');
  glfwGetJoystickGUID := GetProcAddress(aDLLHandle, 'glfwGetJoystickGUID');
  glfwGetJoystickHats := GetProcAddress(aDLLHandle, 'glfwGetJoystickHats');
  glfwGetJoystickName := GetProcAddress(aDLLHandle, 'glfwGetJoystickName');
  glfwGetJoystickUserPointer := GetProcAddress(aDLLHandle, 'glfwGetJoystickUserPointer');
  glfwGetKey := GetProcAddress(aDLLHandle, 'glfwGetKey');
  glfwGetKeyName := GetProcAddress(aDLLHandle, 'glfwGetKeyName');
  glfwGetKeyScancode := GetProcAddress(aDLLHandle, 'glfwGetKeyScancode');
  glfwGetMonitorContentScale := GetProcAddress(aDLLHandle, 'glfwGetMonitorContentScale');
  glfwGetMonitorName := GetProcAddress(aDLLHandle, 'glfwGetMonitorName');
  glfwGetMonitorPhysicalSize := GetProcAddress(aDLLHandle, 'glfwGetMonitorPhysicalSize');
  glfwGetMonitorPos := GetProcAddress(aDLLHandle, 'glfwGetMonitorPos');
  glfwGetMonitors := GetProcAddress(aDLLHandle, 'glfwGetMonitors');
  glfwGetMonitorUserPointer := GetProcAddress(aDLLHandle, 'glfwGetMonitorUserPointer');
  glfwGetMonitorWorkarea := GetProcAddress(aDLLHandle, 'glfwGetMonitorWorkarea');
  glfwGetMouseButton := GetProcAddress(aDLLHandle, 'glfwGetMouseButton');
  glfwGetPlatform := GetProcAddress(aDLLHandle, 'glfwGetPlatform');
  glfwGetPrimaryMonitor := GetProcAddress(aDLLHandle, 'glfwGetPrimaryMonitor');
  glfwGetProcAddress := GetProcAddress(aDLLHandle, 'glfwGetProcAddress');
  glfwGetRequiredInstanceExtensions := GetProcAddress(aDLLHandle, 'glfwGetRequiredInstanceExtensions');
  glfwGetTime := GetProcAddress(aDLLHandle, 'glfwGetTime');
  glfwGetTimerFrequency := GetProcAddress(aDLLHandle, 'glfwGetTimerFrequency');
  glfwGetTimerValue := GetProcAddress(aDLLHandle, 'glfwGetTimerValue');
  glfwGetVersion := GetProcAddress(aDLLHandle, 'glfwGetVersion');
  glfwGetVersionString := GetProcAddress(aDLLHandle, 'glfwGetVersionString');
  glfwGetVideoMode := GetProcAddress(aDLLHandle, 'glfwGetVideoMode');
  glfwGetVideoModes := GetProcAddress(aDLLHandle, 'glfwGetVideoModes');
  glfwGetWindowAttrib := GetProcAddress(aDLLHandle, 'glfwGetWindowAttrib');
  glfwGetWindowContentScale := GetProcAddress(aDLLHandle, 'glfwGetWindowContentScale');
  glfwGetWindowFrameSize := GetProcAddress(aDLLHandle, 'glfwGetWindowFrameSize');
  glfwGetWindowMonitor := GetProcAddress(aDLLHandle, 'glfwGetWindowMonitor');
  glfwGetWindowOpacity := GetProcAddress(aDLLHandle, 'glfwGetWindowOpacity');
  glfwGetWindowPos := GetProcAddress(aDLLHandle, 'glfwGetWindowPos');
  glfwGetWindowSize := GetProcAddress(aDLLHandle, 'glfwGetWindowSize');
  glfwGetWindowUserPointer := GetProcAddress(aDLLHandle, 'glfwGetWindowUserPointer');
  glfwHideWindow := GetProcAddress(aDLLHandle, 'glfwHideWindow');
  glfwIconifyWindow := GetProcAddress(aDLLHandle, 'glfwIconifyWindow');
  glfwInit := GetProcAddress(aDLLHandle, 'glfwInit');
  glfwInitAllocator := GetProcAddress(aDLLHandle, 'glfwInitAllocator');
  glfwInitHint := GetProcAddress(aDLLHandle, 'glfwInitHint');
  glfwJoystickIsGamepad := GetProcAddress(aDLLHandle, 'glfwJoystickIsGamepad');
  glfwJoystickPresent := GetProcAddress(aDLLHandle, 'glfwJoystickPresent');
  glfwMakeContextCurrent := GetProcAddress(aDLLHandle, 'glfwMakeContextCurrent');
  glfwMaximizeWindow := GetProcAddress(aDLLHandle, 'glfwMaximizeWindow');
  glfwPlatformSupported := GetProcAddress(aDLLHandle, 'glfwPlatformSupported');
  glfwPollEvents := GetProcAddress(aDLLHandle, 'glfwPollEvents');
  glfwPostEmptyEvent := GetProcAddress(aDLLHandle, 'glfwPostEmptyEvent');
  glfwRawMouseMotionSupported := GetProcAddress(aDLLHandle, 'glfwRawMouseMotionSupported');
  glfwRequestWindowAttention := GetProcAddress(aDLLHandle, 'glfwRequestWindowAttention');
  glfwRestoreWindow := GetProcAddress(aDLLHandle, 'glfwRestoreWindow');
  glfwSetCharCallback := GetProcAddress(aDLLHandle, 'glfwSetCharCallback');
  glfwSetCharModsCallback := GetProcAddress(aDLLHandle, 'glfwSetCharModsCallback');
  glfwSetClipboardString := GetProcAddress(aDLLHandle, 'glfwSetClipboardString');
  glfwSetCursor := GetProcAddress(aDLLHandle, 'glfwSetCursor');
  glfwSetCursorEnterCallback := GetProcAddress(aDLLHandle, 'glfwSetCursorEnterCallback');
  glfwSetCursorPos := GetProcAddress(aDLLHandle, 'glfwSetCursorPos');
  glfwSetCursorPosCallback := GetProcAddress(aDLLHandle, 'glfwSetCursorPosCallback');
  glfwSetDropCallback := GetProcAddress(aDLLHandle, 'glfwSetDropCallback');
  glfwSetErrorCallback := GetProcAddress(aDLLHandle, 'glfwSetErrorCallback');
  glfwSetFramebufferSizeCallback := GetProcAddress(aDLLHandle, 'glfwSetFramebufferSizeCallback');
  glfwSetGamma := GetProcAddress(aDLLHandle, 'glfwSetGamma');
  glfwSetGammaRamp := GetProcAddress(aDLLHandle, 'glfwSetGammaRamp');
  glfwSetInputMode := GetProcAddress(aDLLHandle, 'glfwSetInputMode');
  glfwSetJoystickCallback := GetProcAddress(aDLLHandle, 'glfwSetJoystickCallback');
  glfwSetJoystickUserPointer := GetProcAddress(aDLLHandle, 'glfwSetJoystickUserPointer');
  glfwSetKeyCallback := GetProcAddress(aDLLHandle, 'glfwSetKeyCallback');
  glfwSetMonitorCallback := GetProcAddress(aDLLHandle, 'glfwSetMonitorCallback');
  glfwSetMonitorUserPointer := GetProcAddress(aDLLHandle, 'glfwSetMonitorUserPointer');
  glfwSetMouseButtonCallback := GetProcAddress(aDLLHandle, 'glfwSetMouseButtonCallback');
  glfwSetScrollCallback := GetProcAddress(aDLLHandle, 'glfwSetScrollCallback');
  glfwSetTime := GetProcAddress(aDLLHandle, 'glfwSetTime');
  glfwSetWindowAspectRatio := GetProcAddress(aDLLHandle, 'glfwSetWindowAspectRatio');
  glfwSetWindowAttrib := GetProcAddress(aDLLHandle, 'glfwSetWindowAttrib');
  glfwSetWindowCloseCallback := GetProcAddress(aDLLHandle, 'glfwSetWindowCloseCallback');
  glfwSetWindowContentScaleCallback := GetProcAddress(aDLLHandle, 'glfwSetWindowContentScaleCallback');
  glfwSetWindowFocusCallback := GetProcAddress(aDLLHandle, 'glfwSetWindowFocusCallback');
  glfwSetWindowIcon := GetProcAddress(aDLLHandle, 'glfwSetWindowIcon');
  glfwSetWindowIconifyCallback := GetProcAddress(aDLLHandle, 'glfwSetWindowIconifyCallback');
  glfwSetWindowMaximizeCallback := GetProcAddress(aDLLHandle, 'glfwSetWindowMaximizeCallback');
  glfwSetWindowMonitor := GetProcAddress(aDLLHandle, 'glfwSetWindowMonitor');
  glfwSetWindowOpacity := GetProcAddress(aDLLHandle, 'glfwSetWindowOpacity');
  glfwSetWindowPos := GetProcAddress(aDLLHandle, 'glfwSetWindowPos');
  glfwSetWindowPosCallback := GetProcAddress(aDLLHandle, 'glfwSetWindowPosCallback');
  glfwSetWindowRefreshCallback := GetProcAddress(aDLLHandle, 'glfwSetWindowRefreshCallback');
  glfwSetWindowShouldClose := GetProcAddress(aDLLHandle, 'glfwSetWindowShouldClose');
  glfwSetWindowSize := GetProcAddress(aDLLHandle, 'glfwSetWindowSize');
  glfwSetWindowSizeCallback := GetProcAddress(aDLLHandle, 'glfwSetWindowSizeCallback');
  glfwSetWindowSizeLimits := GetProcAddress(aDLLHandle, 'glfwSetWindowSizeLimits');
  glfwSetWindowTitle := GetProcAddress(aDLLHandle, 'glfwSetWindowTitle');
  glfwSetWindowUserPointer := GetProcAddress(aDLLHandle, 'glfwSetWindowUserPointer');
  glfwShowWindow := GetProcAddress(aDLLHandle, 'glfwShowWindow');
  glfwSwapBuffers := GetProcAddress(aDLLHandle, 'glfwSwapBuffers');
  glfwSwapInterval := GetProcAddress(aDLLHandle, 'glfwSwapInterval');
  glfwTerminate := GetProcAddress(aDLLHandle, 'glfwTerminate');
  glfwUpdateGamepadMappings := GetProcAddress(aDLLHandle, 'glfwUpdateGamepadMappings');
  glfwVulkanSupported := GetProcAddress(aDLLHandle, 'glfwVulkanSupported');
  glfwWaitEvents := GetProcAddress(aDLLHandle, 'glfwWaitEvents');
  glfwWaitEventsTimeout := GetProcAddress(aDLLHandle, 'glfwWaitEventsTimeout');
  glfwWindowHint := GetProcAddress(aDLLHandle, 'glfwWindowHint');
  glfwWindowHintString := GetProcAddress(aDLLHandle, 'glfwWindowHintString');
  glfwWindowShouldClose := GetProcAddress(aDLLHandle, 'glfwWindowShouldClose');
  ov_bitrate := GetProcAddress(aDLLHandle, 'ov_bitrate');
  ov_bitrate_instant := GetProcAddress(aDLLHandle, 'ov_bitrate_instant');
  ov_clear := GetProcAddress(aDLLHandle, 'ov_clear');
  ov_comment := GetProcAddress(aDLLHandle, 'ov_comment');
  ov_crosslap := GetProcAddress(aDLLHandle, 'ov_crosslap');
  ov_fopen := GetProcAddress(aDLLHandle, 'ov_fopen');
  ov_halfrate := GetProcAddress(aDLLHandle, 'ov_halfrate');
  ov_halfrate_p := GetProcAddress(aDLLHandle, 'ov_halfrate_p');
  ov_info := GetProcAddress(aDLLHandle, 'ov_info');
  ov_open_callbacks := GetProcAddress(aDLLHandle, 'ov_open_callbacks');
  ov_pcm_seek := GetProcAddress(aDLLHandle, 'ov_pcm_seek');
  ov_pcm_seek_lap := GetProcAddress(aDLLHandle, 'ov_pcm_seek_lap');
  ov_pcm_seek_page := GetProcAddress(aDLLHandle, 'ov_pcm_seek_page');
  ov_pcm_seek_page_lap := GetProcAddress(aDLLHandle, 'ov_pcm_seek_page_lap');
  ov_pcm_tell := GetProcAddress(aDLLHandle, 'ov_pcm_tell');
  ov_pcm_total := GetProcAddress(aDLLHandle, 'ov_pcm_total');
  ov_raw_seek := GetProcAddress(aDLLHandle, 'ov_raw_seek');
  ov_raw_seek_lap := GetProcAddress(aDLLHandle, 'ov_raw_seek_lap');
  ov_raw_tell := GetProcAddress(aDLLHandle, 'ov_raw_tell');
  ov_raw_total := GetProcAddress(aDLLHandle, 'ov_raw_total');
  ov_read := GetProcAddress(aDLLHandle, 'ov_read');
  ov_read_filter := GetProcAddress(aDLLHandle, 'ov_read_filter');
  ov_read_float := GetProcAddress(aDLLHandle, 'ov_read_float');
  ov_seekable := GetProcAddress(aDLLHandle, 'ov_seekable');
  ov_serialnumber := GetProcAddress(aDLLHandle, 'ov_serialnumber');
  ov_streams := GetProcAddress(aDLLHandle, 'ov_streams');
  ov_test_callbacks := GetProcAddress(aDLLHandle, 'ov_test_callbacks');
  ov_test_open := GetProcAddress(aDLLHandle, 'ov_test_open');
  ov_time_seek := GetProcAddress(aDLLHandle, 'ov_time_seek');
  ov_time_seek_lap := GetProcAddress(aDLLHandle, 'ov_time_seek_lap');
  ov_time_seek_page := GetProcAddress(aDLLHandle, 'ov_time_seek_page');
  ov_time_seek_page_lap := GetProcAddress(aDLLHandle, 'ov_time_seek_page_lap');
  ov_time_tell := GetProcAddress(aDLLHandle, 'ov_time_tell');
  ov_time_total := GetProcAddress(aDLLHandle, 'ov_time_total');
  plm_audio_create_with_buffer := GetProcAddress(aDLLHandle, 'plm_audio_create_with_buffer');
  plm_audio_decode := GetProcAddress(aDLLHandle, 'plm_audio_decode');
  plm_audio_destroy := GetProcAddress(aDLLHandle, 'plm_audio_destroy');
  plm_audio_get_samplerate := GetProcAddress(aDLLHandle, 'plm_audio_get_samplerate');
  plm_audio_get_time := GetProcAddress(aDLLHandle, 'plm_audio_get_time');
  plm_audio_has_ended := GetProcAddress(aDLLHandle, 'plm_audio_has_ended');
  plm_audio_has_header := GetProcAddress(aDLLHandle, 'plm_audio_has_header');
  plm_audio_rewind := GetProcAddress(aDLLHandle, 'plm_audio_rewind');
  plm_audio_set_time := GetProcAddress(aDLLHandle, 'plm_audio_set_time');
  plm_buffer_create_for_appending := GetProcAddress(aDLLHandle, 'plm_buffer_create_for_appending');
  plm_buffer_create_with_capacity := GetProcAddress(aDLLHandle, 'plm_buffer_create_with_capacity');
  plm_buffer_create_with_file := GetProcAddress(aDLLHandle, 'plm_buffer_create_with_file');
  plm_buffer_create_with_filename := GetProcAddress(aDLLHandle, 'plm_buffer_create_with_filename');
  plm_buffer_create_with_memory := GetProcAddress(aDLLHandle, 'plm_buffer_create_with_memory');
  plm_buffer_destroy := GetProcAddress(aDLLHandle, 'plm_buffer_destroy');
  plm_buffer_get_remaining := GetProcAddress(aDLLHandle, 'plm_buffer_get_remaining');
  plm_buffer_get_size := GetProcAddress(aDLLHandle, 'plm_buffer_get_size');
  plm_buffer_has_ended := GetProcAddress(aDLLHandle, 'plm_buffer_has_ended');
  plm_buffer_rewind := GetProcAddress(aDLLHandle, 'plm_buffer_rewind');
  plm_buffer_set_load_callback := GetProcAddress(aDLLHandle, 'plm_buffer_set_load_callback');
  plm_buffer_signal_end := GetProcAddress(aDLLHandle, 'plm_buffer_signal_end');
  plm_buffer_write := GetProcAddress(aDLLHandle, 'plm_buffer_write');
  plm_create_with_buffer := GetProcAddress(aDLLHandle, 'plm_create_with_buffer');
  plm_create_with_file := GetProcAddress(aDLLHandle, 'plm_create_with_file');
  plm_create_with_filename := GetProcAddress(aDLLHandle, 'plm_create_with_filename');
  plm_create_with_memory := GetProcAddress(aDLLHandle, 'plm_create_with_memory');
  plm_decode := GetProcAddress(aDLLHandle, 'plm_decode');
  plm_decode_audio := GetProcAddress(aDLLHandle, 'plm_decode_audio');
  plm_decode_video := GetProcAddress(aDLLHandle, 'plm_decode_video');
  plm_demux_create := GetProcAddress(aDLLHandle, 'plm_demux_create');
  plm_demux_decode := GetProcAddress(aDLLHandle, 'plm_demux_decode');
  plm_demux_destroy := GetProcAddress(aDLLHandle, 'plm_demux_destroy');
  plm_demux_get_duration := GetProcAddress(aDLLHandle, 'plm_demux_get_duration');
  plm_demux_get_num_audio_streams := GetProcAddress(aDLLHandle, 'plm_demux_get_num_audio_streams');
  plm_demux_get_num_video_streams := GetProcAddress(aDLLHandle, 'plm_demux_get_num_video_streams');
  plm_demux_get_start_time := GetProcAddress(aDLLHandle, 'plm_demux_get_start_time');
  plm_demux_has_ended := GetProcAddress(aDLLHandle, 'plm_demux_has_ended');
  plm_demux_has_headers := GetProcAddress(aDLLHandle, 'plm_demux_has_headers');
  plm_demux_rewind := GetProcAddress(aDLLHandle, 'plm_demux_rewind');
  plm_demux_seek := GetProcAddress(aDLLHandle, 'plm_demux_seek');
  plm_destroy := GetProcAddress(aDLLHandle, 'plm_destroy');
  plm_frame_to_abgr := GetProcAddress(aDLLHandle, 'plm_frame_to_abgr');
  plm_frame_to_argb := GetProcAddress(aDLLHandle, 'plm_frame_to_argb');
  plm_frame_to_bgr := GetProcAddress(aDLLHandle, 'plm_frame_to_bgr');
  plm_frame_to_bgra := GetProcAddress(aDLLHandle, 'plm_frame_to_bgra');
  plm_frame_to_rgb := GetProcAddress(aDLLHandle, 'plm_frame_to_rgb');
  plm_frame_to_rgba := GetProcAddress(aDLLHandle, 'plm_frame_to_rgba');
  plm_get_audio_enabled := GetProcAddress(aDLLHandle, 'plm_get_audio_enabled');
  plm_get_audio_lead_time := GetProcAddress(aDLLHandle, 'plm_get_audio_lead_time');
  plm_get_duration := GetProcAddress(aDLLHandle, 'plm_get_duration');
  plm_get_framerate := GetProcAddress(aDLLHandle, 'plm_get_framerate');
  plm_get_height := GetProcAddress(aDLLHandle, 'plm_get_height');
  plm_get_loop := GetProcAddress(aDLLHandle, 'plm_get_loop');
  plm_get_num_audio_streams := GetProcAddress(aDLLHandle, 'plm_get_num_audio_streams');
  plm_get_num_video_streams := GetProcAddress(aDLLHandle, 'plm_get_num_video_streams');
  plm_get_samplerate := GetProcAddress(aDLLHandle, 'plm_get_samplerate');
  plm_get_time := GetProcAddress(aDLLHandle, 'plm_get_time');
  plm_get_video_enabled := GetProcAddress(aDLLHandle, 'plm_get_video_enabled');
  plm_get_width := GetProcAddress(aDLLHandle, 'plm_get_width');
  plm_has_ended := GetProcAddress(aDLLHandle, 'plm_has_ended');
  plm_has_headers := GetProcAddress(aDLLHandle, 'plm_has_headers');
  plm_rewind := GetProcAddress(aDLLHandle, 'plm_rewind');
  plm_seek := GetProcAddress(aDLLHandle, 'plm_seek');
  plm_seek_frame := GetProcAddress(aDLLHandle, 'plm_seek_frame');
  plm_set_audio_decode_callback := GetProcAddress(aDLLHandle, 'plm_set_audio_decode_callback');
  plm_set_audio_enabled := GetProcAddress(aDLLHandle, 'plm_set_audio_enabled');
  plm_set_audio_lead_time := GetProcAddress(aDLLHandle, 'plm_set_audio_lead_time');
  plm_set_audio_stream := GetProcAddress(aDLLHandle, 'plm_set_audio_stream');
  plm_set_loop := GetProcAddress(aDLLHandle, 'plm_set_loop');
  plm_set_video_decode_callback := GetProcAddress(aDLLHandle, 'plm_set_video_decode_callback');
  plm_set_video_enabled := GetProcAddress(aDLLHandle, 'plm_set_video_enabled');
  plm_video_create_with_buffer := GetProcAddress(aDLLHandle, 'plm_video_create_with_buffer');
  plm_video_decode := GetProcAddress(aDLLHandle, 'plm_video_decode');
  plm_video_destroy := GetProcAddress(aDLLHandle, 'plm_video_destroy');
  plm_video_get_framerate := GetProcAddress(aDLLHandle, 'plm_video_get_framerate');
  plm_video_get_height := GetProcAddress(aDLLHandle, 'plm_video_get_height');
  plm_video_get_time := GetProcAddress(aDLLHandle, 'plm_video_get_time');
  plm_video_get_width := GetProcAddress(aDLLHandle, 'plm_video_get_width');
  plm_video_has_ended := GetProcAddress(aDLLHandle, 'plm_video_has_ended');
  plm_video_has_header := GetProcAddress(aDLLHandle, 'plm_video_has_header');
  plm_video_rewind := GetProcAddress(aDLLHandle, 'plm_video_rewind');
  plm_video_set_no_delay := GetProcAddress(aDLLHandle, 'plm_video_set_no_delay');
  plm_video_set_time := GetProcAddress(aDLLHandle, 'plm_video_set_time');
  stbi_convert_iphone_png_to_rgb := GetProcAddress(aDLLHandle, 'stbi_convert_iphone_png_to_rgb');
  stbi_convert_iphone_png_to_rgb_thread := GetProcAddress(aDLLHandle, 'stbi_convert_iphone_png_to_rgb_thread');
  stbi_failure_reason := GetProcAddress(aDLLHandle, 'stbi_failure_reason');
  stbi_flip_vertically_on_write := GetProcAddress(aDLLHandle, 'stbi_flip_vertically_on_write');
  stbi_hdr_to_ldr_gamma := GetProcAddress(aDLLHandle, 'stbi_hdr_to_ldr_gamma');
  stbi_hdr_to_ldr_scale := GetProcAddress(aDLLHandle, 'stbi_hdr_to_ldr_scale');
  stbi_image_free := GetProcAddress(aDLLHandle, 'stbi_image_free');
  stbi_info := GetProcAddress(aDLLHandle, 'stbi_info');
  stbi_info_from_callbacks := GetProcAddress(aDLLHandle, 'stbi_info_from_callbacks');
  stbi_info_from_file := GetProcAddress(aDLLHandle, 'stbi_info_from_file');
  stbi_info_from_memory := GetProcAddress(aDLLHandle, 'stbi_info_from_memory');
  stbi_is_16_bit := GetProcAddress(aDLLHandle, 'stbi_is_16_bit');
  stbi_is_16_bit_from_callbacks := GetProcAddress(aDLLHandle, 'stbi_is_16_bit_from_callbacks');
  stbi_is_16_bit_from_file := GetProcAddress(aDLLHandle, 'stbi_is_16_bit_from_file');
  stbi_is_16_bit_from_memory := GetProcAddress(aDLLHandle, 'stbi_is_16_bit_from_memory');
  stbi_is_hdr := GetProcAddress(aDLLHandle, 'stbi_is_hdr');
  stbi_is_hdr_from_callbacks := GetProcAddress(aDLLHandle, 'stbi_is_hdr_from_callbacks');
  stbi_is_hdr_from_file := GetProcAddress(aDLLHandle, 'stbi_is_hdr_from_file');
  stbi_is_hdr_from_memory := GetProcAddress(aDLLHandle, 'stbi_is_hdr_from_memory');
  stbi_ldr_to_hdr_gamma := GetProcAddress(aDLLHandle, 'stbi_ldr_to_hdr_gamma');
  stbi_ldr_to_hdr_scale := GetProcAddress(aDLLHandle, 'stbi_ldr_to_hdr_scale');
  stbi_load := GetProcAddress(aDLLHandle, 'stbi_load');
  stbi_load_16 := GetProcAddress(aDLLHandle, 'stbi_load_16');
  stbi_load_16_from_callbacks := GetProcAddress(aDLLHandle, 'stbi_load_16_from_callbacks');
  stbi_load_16_from_memory := GetProcAddress(aDLLHandle, 'stbi_load_16_from_memory');
  stbi_load_from_callbacks := GetProcAddress(aDLLHandle, 'stbi_load_from_callbacks');
  stbi_load_from_file := GetProcAddress(aDLLHandle, 'stbi_load_from_file');
  stbi_load_from_file_16 := GetProcAddress(aDLLHandle, 'stbi_load_from_file_16');
  stbi_load_from_memory := GetProcAddress(aDLLHandle, 'stbi_load_from_memory');
  stbi_load_gif_from_memory := GetProcAddress(aDLLHandle, 'stbi_load_gif_from_memory');
  stbi_loadf := GetProcAddress(aDLLHandle, 'stbi_loadf');
  stbi_loadf_from_callbacks := GetProcAddress(aDLLHandle, 'stbi_loadf_from_callbacks');
  stbi_loadf_from_file := GetProcAddress(aDLLHandle, 'stbi_loadf_from_file');
  stbi_loadf_from_memory := GetProcAddress(aDLLHandle, 'stbi_loadf_from_memory');
  stbi_set_flip_vertically_on_load := GetProcAddress(aDLLHandle, 'stbi_set_flip_vertically_on_load');
  stbi_set_flip_vertically_on_load_thread := GetProcAddress(aDLLHandle, 'stbi_set_flip_vertically_on_load_thread');
  stbi_set_unpremultiply_on_load := GetProcAddress(aDLLHandle, 'stbi_set_unpremultiply_on_load');
  stbi_set_unpremultiply_on_load_thread := GetProcAddress(aDLLHandle, 'stbi_set_unpremultiply_on_load_thread');
  stbi_write_bmp := GetProcAddress(aDLLHandle, 'stbi_write_bmp');
  stbi_write_bmp_to_func := GetProcAddress(aDLLHandle, 'stbi_write_bmp_to_func');
  stbi_write_hdr := GetProcAddress(aDLLHandle, 'stbi_write_hdr');
  stbi_write_hdr_to_func := GetProcAddress(aDLLHandle, 'stbi_write_hdr_to_func');
  stbi_write_jpg := GetProcAddress(aDLLHandle, 'stbi_write_jpg');
  stbi_write_jpg_to_func := GetProcAddress(aDLLHandle, 'stbi_write_jpg_to_func');
  stbi_write_png := GetProcAddress(aDLLHandle, 'stbi_write_png');
  stbi_write_png_to_func := GetProcAddress(aDLLHandle, 'stbi_write_png_to_func');
  stbi_write_tga := GetProcAddress(aDLLHandle, 'stbi_write_tga');
  stbi_write_tga_to_func := GetProcAddress(aDLLHandle, 'stbi_write_tga_to_func');
  stbi_zlib_decode_buffer := GetProcAddress(aDLLHandle, 'stbi_zlib_decode_buffer');
  stbi_zlib_decode_malloc := GetProcAddress(aDLLHandle, 'stbi_zlib_decode_malloc');
  stbi_zlib_decode_malloc_guesssize := GetProcAddress(aDLLHandle, 'stbi_zlib_decode_malloc_guesssize');
  stbi_zlib_decode_malloc_guesssize_headerflag := GetProcAddress(aDLLHandle, 'stbi_zlib_decode_malloc_guesssize_headerflag');
  stbi_zlib_decode_noheader_buffer := GetProcAddress(aDLLHandle, 'stbi_zlib_decode_noheader_buffer');
  stbi_zlib_decode_noheader_malloc := GetProcAddress(aDLLHandle, 'stbi_zlib_decode_noheader_malloc');
  stbtt_BakeFontBitmap := GetProcAddress(aDLLHandle, 'stbtt_BakeFontBitmap');
  stbtt_CompareUTF8toUTF16_bigendian := GetProcAddress(aDLLHandle, 'stbtt_CompareUTF8toUTF16_bigendian');
  stbtt_FindGlyphIndex := GetProcAddress(aDLLHandle, 'stbtt_FindGlyphIndex');
  stbtt_FindMatchingFont := GetProcAddress(aDLLHandle, 'stbtt_FindMatchingFont');
  stbtt_FindSVGDoc := GetProcAddress(aDLLHandle, 'stbtt_FindSVGDoc');
  stbtt_FreeBitmap := GetProcAddress(aDLLHandle, 'stbtt_FreeBitmap');
  stbtt_FreeSDF := GetProcAddress(aDLLHandle, 'stbtt_FreeSDF');
  stbtt_FreeShape := GetProcAddress(aDLLHandle, 'stbtt_FreeShape');
  stbtt_GetBakedQuad := GetProcAddress(aDLLHandle, 'stbtt_GetBakedQuad');
  stbtt_GetCodepointBitmap := GetProcAddress(aDLLHandle, 'stbtt_GetCodepointBitmap');
  stbtt_GetCodepointBitmapBox := GetProcAddress(aDLLHandle, 'stbtt_GetCodepointBitmapBox');
  stbtt_GetCodepointBitmapBoxSubpixel := GetProcAddress(aDLLHandle, 'stbtt_GetCodepointBitmapBoxSubpixel');
  stbtt_GetCodepointBitmapSubpixel := GetProcAddress(aDLLHandle, 'stbtt_GetCodepointBitmapSubpixel');
  stbtt_GetCodepointBox := GetProcAddress(aDLLHandle, 'stbtt_GetCodepointBox');
  stbtt_GetCodepointHMetrics := GetProcAddress(aDLLHandle, 'stbtt_GetCodepointHMetrics');
  stbtt_GetCodepointKernAdvance := GetProcAddress(aDLLHandle, 'stbtt_GetCodepointKernAdvance');
  stbtt_GetCodepointSDF := GetProcAddress(aDLLHandle, 'stbtt_GetCodepointSDF');
  stbtt_GetCodepointShape := GetProcAddress(aDLLHandle, 'stbtt_GetCodepointShape');
  stbtt_GetCodepointSVG := GetProcAddress(aDLLHandle, 'stbtt_GetCodepointSVG');
  stbtt_GetFontBoundingBox := GetProcAddress(aDLLHandle, 'stbtt_GetFontBoundingBox');
  stbtt_GetFontNameString := GetProcAddress(aDLLHandle, 'stbtt_GetFontNameString');
  stbtt_GetFontOffsetForIndex := GetProcAddress(aDLLHandle, 'stbtt_GetFontOffsetForIndex');
  stbtt_GetFontVMetrics := GetProcAddress(aDLLHandle, 'stbtt_GetFontVMetrics');
  stbtt_GetFontVMetricsOS2 := GetProcAddress(aDLLHandle, 'stbtt_GetFontVMetricsOS2');
  stbtt_GetGlyphBitmap := GetProcAddress(aDLLHandle, 'stbtt_GetGlyphBitmap');
  stbtt_GetGlyphBitmapBox := GetProcAddress(aDLLHandle, 'stbtt_GetGlyphBitmapBox');
  stbtt_GetGlyphBitmapBoxSubpixel := GetProcAddress(aDLLHandle, 'stbtt_GetGlyphBitmapBoxSubpixel');
  stbtt_GetGlyphBitmapSubpixel := GetProcAddress(aDLLHandle, 'stbtt_GetGlyphBitmapSubpixel');
  stbtt_GetGlyphBox := GetProcAddress(aDLLHandle, 'stbtt_GetGlyphBox');
  stbtt_GetGlyphHMetrics := GetProcAddress(aDLLHandle, 'stbtt_GetGlyphHMetrics');
  stbtt_GetGlyphKernAdvance := GetProcAddress(aDLLHandle, 'stbtt_GetGlyphKernAdvance');
  stbtt_GetGlyphSDF := GetProcAddress(aDLLHandle, 'stbtt_GetGlyphSDF');
  stbtt_GetGlyphShape := GetProcAddress(aDLLHandle, 'stbtt_GetGlyphShape');
  stbtt_GetGlyphSVG := GetProcAddress(aDLLHandle, 'stbtt_GetGlyphSVG');
  stbtt_GetKerningTable := GetProcAddress(aDLLHandle, 'stbtt_GetKerningTable');
  stbtt_GetKerningTableLength := GetProcAddress(aDLLHandle, 'stbtt_GetKerningTableLength');
  stbtt_GetNumberOfFonts := GetProcAddress(aDLLHandle, 'stbtt_GetNumberOfFonts');
  stbtt_GetPackedQuad := GetProcAddress(aDLLHandle, 'stbtt_GetPackedQuad');
  stbtt_GetScaledFontVMetrics := GetProcAddress(aDLLHandle, 'stbtt_GetScaledFontVMetrics');
  stbtt_InitFont := GetProcAddress(aDLLHandle, 'stbtt_InitFont');
  stbtt_IsGlyphEmpty := GetProcAddress(aDLLHandle, 'stbtt_IsGlyphEmpty');
  stbtt_MakeCodepointBitmap := GetProcAddress(aDLLHandle, 'stbtt_MakeCodepointBitmap');
  stbtt_MakeCodepointBitmapSubpixel := GetProcAddress(aDLLHandle, 'stbtt_MakeCodepointBitmapSubpixel');
  stbtt_MakeCodepointBitmapSubpixelPrefilter := GetProcAddress(aDLLHandle, 'stbtt_MakeCodepointBitmapSubpixelPrefilter');
  stbtt_MakeGlyphBitmap := GetProcAddress(aDLLHandle, 'stbtt_MakeGlyphBitmap');
  stbtt_MakeGlyphBitmapSubpixel := GetProcAddress(aDLLHandle, 'stbtt_MakeGlyphBitmapSubpixel');
  stbtt_MakeGlyphBitmapSubpixelPrefilter := GetProcAddress(aDLLHandle, 'stbtt_MakeGlyphBitmapSubpixelPrefilter');
  stbtt_PackBegin := GetProcAddress(aDLLHandle, 'stbtt_PackBegin');
  stbtt_PackEnd := GetProcAddress(aDLLHandle, 'stbtt_PackEnd');
  stbtt_PackFontRange := GetProcAddress(aDLLHandle, 'stbtt_PackFontRange');
  stbtt_PackFontRanges := GetProcAddress(aDLLHandle, 'stbtt_PackFontRanges');
  stbtt_PackFontRangesGatherRects := GetProcAddress(aDLLHandle, 'stbtt_PackFontRangesGatherRects');
  stbtt_PackFontRangesPackRects := GetProcAddress(aDLLHandle, 'stbtt_PackFontRangesPackRects');
  stbtt_PackFontRangesRenderIntoRects := GetProcAddress(aDLLHandle, 'stbtt_PackFontRangesRenderIntoRects');
  stbtt_PackSetOversampling := GetProcAddress(aDLLHandle, 'stbtt_PackSetOversampling');
  stbtt_PackSetSkipMissingCodepoints := GetProcAddress(aDLLHandle, 'stbtt_PackSetSkipMissingCodepoints');
  stbtt_Rasterize := GetProcAddress(aDLLHandle, 'stbtt_Rasterize');
  stbtt_ScaleForMappingEmToPixels := GetProcAddress(aDLLHandle, 'stbtt_ScaleForMappingEmToPixels');
  stbtt_ScaleForPixelHeight := GetProcAddress(aDLLHandle, 'stbtt_ScaleForPixelHeight');
  unzClose := GetProcAddress(aDLLHandle, 'unzClose');
  unzCloseCurrentFile := GetProcAddress(aDLLHandle, 'unzCloseCurrentFile');
  unzGetCurrentFileInfo64 := GetProcAddress(aDLLHandle, 'unzGetCurrentFileInfo64');
  unzLocateFile := GetProcAddress(aDLLHandle, 'unzLocateFile');
  unzOpen64 := GetProcAddress(aDLLHandle, 'unzOpen64');
  unzOpenCurrentFilePassword := GetProcAddress(aDLLHandle, 'unzOpenCurrentFilePassword');
  unzReadCurrentFile := GetProcAddress(aDLLHandle, 'unzReadCurrentFile');
  unztell64 := GetProcAddress(aDLLHandle, 'unztell64');
  zipClose := GetProcAddress(aDLLHandle, 'zipClose');
  zipCloseFileInZip := GetProcAddress(aDLLHandle, 'zipCloseFileInZip');
  zipOpen64 := GetProcAddress(aDLLHandle, 'zipOpen64');
  zipOpenNewFileInZip3_64 := GetProcAddress(aDLLHandle, 'zipOpenNewFileInZip3_64');
  zipWriteInFileInZip := GetProcAddress(aDLLHandle, 'zipWriteInFileInZip');
end;

end.
